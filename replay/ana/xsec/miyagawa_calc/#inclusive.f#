C*
C*   Inclusive cross sections for the process d(gamma ,K^+)YN
C*   are calculated in the deuteron rest frame.
C*              Hisahiko Yamamura, Kazuya Miyagawa
C*
C* INPUT DATA ---------------------------------------------------------
C
C     Input data in the lab system (deuteron rest frame).
C     Incoming photon points to the z-axis, and the xz-plane
C     is chosen as the kaon scattering plane.
C
C     PGin  : PHOTON ENERGY [MEV]
C     THEK  : KAON ANGLE [DEG]
C     PKout : KAON MOMENTUM [MEV/C]
C
C     JMAX=-1 : Plane Wave Impulse Approximation
C     JMAx=0-5: Calculation including the YN final state interaction
C               with the maximum YN total angular momentum JMAX.
C               (JMAX=1 is sufficient)
C
C     MOPER specifies the models made by Mart and Bennhold
C     for the elementary process  gamma+N --> K^+ +Y.
C         MOPER=1 :   model in 1996
C         MOPER=2 :   model in 1998
C         MOPER=3 :   model including the D_13 resonance
C
C
C INPUT FILE should be read   ------------------------------------------
C       'deuwf.dat' : deuteron wavefuction generated by
C                     the Nijmegen NN interaction 'NIJM93'.
C
C FILES should be included ---------------------------------------------
C     *YN interaction
C        Include one of the following two files which include different
C        YN interaction models. Never merge these two into one file!!
C           'nijyn97.fi': Nijmegen model 'NSC97f'
C           'nijyn89.fi': Nijmegen model 'NSC89'
C     *Operator for the gamma+N-->K^+ +Y process
C          'operator.fi'
C ----------------------------------------------------------------------
C
C
C  BEGIN PROGRAM
C
      INCLUDE 'nijyn97m2.fi'
c     INCLUDE 'nijyn89.fi' 
      INCLUDE 'operatormm.fi'

      IMPLICIT REAL*8(A-H,O-Z)
      DIMENSION CRS(3)
      COMMON /AMAS/   AMNUC,AMLAM,AMSIG,AMKAO
      COMMON /HQCP/   HQC,PI
      COMMON /OPEMOD/ MODOP1,MODOP2
      common /kine1/  EP0,PK0,THK0
C
C  -- Output file --
      OPEN(11,file='out_inclusive.txt',STATUS='UNKNOWN')

C  -- Input file (deuteron wavefunction)
      OPEN(15,FILE='deuwf.dat',STATUS='OLD',FORM='FORMATTED')
      OPEN(25,FILE='input0.dat',STATUS='OLD',FORM='FORMATTED')

C  -- Input data ---
C     PGin = 1250.D0
      read(25,*) PGin

C     THEK = 0.D0
      read(25,*) THEK

      JMAX = 1

cc       If you like JMAX greater than 1, also change JMAXX's
cc       in PARAMETER's

      if (JMAX.gt.5) stop ' JMAX should be smaller than 6'

C
      CALL DATAINI
C  -------------------
C
      EP0  = PGin / HQC
      THK0 = THEK * PI / 180.D0
C
      MOPER = 3

      IF (MOPER.EQ.1) THEN
        MODOP1 = 4
        MODOP2 = 2
      ELSEIF (MOPER.EQ.2) THEN
        MODOP1 = 6
        MODOP2 = 4
      ELSEIF (MOPER.EQ.3) THEN
        MODOP1 = 7
        MODOP2 = 4
      ENDIF
c     **** for details on MODOP1, MODOP2, see the comments in PWIA
c
C
      CALL POTCHECK(MYNPOT)
c
      write(11,*) 'Gamma + d --> K + Y + N ( LAB FRAME )'
      if(jmax.ne.-1) then
        if(MYNPOT.eq.1) then
          write(11,*) ' Final State Interaction : NSC97f'
        elseif(MYNPOT.eq.2) then
          write(11,*) ' Final State Interaction : NSC89'
        endif
      else
        write(11,*) ' Plane Wave Impulse Approximation'
      endif

      if(moper.eq.1) then
        write(11,*) ' operator in 1996'
      elseif(moper.eq.2) then
        write(11,*) ' operator in 1998'
      elseif(moper.eq.3) then
        write(11,*) ' operator with D_13 resonance'
      endif

      write(11,312) JMAX
      write(11,313) PGin,THEK
c
C
      write(11,*) 'PK, LN, S(0)N, S(-)P,TOTAL  [nb/(MeV/c Sr)]'

      read(25,*) NPKout
      DO 1000 i=1,NPKout
         read(25,10) PKout
         PK0 = PKout / HQC
         CALL INCLUSIVE(JMAX, CRS)
         write(11,287) PKout,CRS(1),CRS(2),CRS(3),CRS(1)+CRS(2)+CRS(3) 
 1000 continue

c
  312 format(2X,'JMAX=',I4)
  313 format(/'*** INCLUSIVE CROSS SECTION ***'
     &       /4X,'PHOTON ENERGY [MEV] :',1X,E15.7
     &       /4X,'KAON ANGLE [DEG] :',1X,E15.7/)
  287 format(2X,F8.2,2x,4E15.7)
  10  format(2x,D14.7)

C
      END
C
C     ---1---------2---------3---------4---------5---------6---------7--
C
C*
C* ********************************************************************
C* INITIAL DATA
      SUBROUTINE DATAINI
C
      IMPLICIT REAL*8 (A-H,O-Z)
      REAL*8    MPROT,MNEUT,MLAMB,MSIGP,MSIGN,MSIGM
     &         ,MKAO
      PARAMETER(NP=35,NK=2*NP,NKK=4*NP)
      PARAMETER(NP2=NP+2)
      PARAMETER(npx=16)
      PARAMETER(nphi=14)
c
      PARAMETER(npxinc=16)
      PARAMETER(nphiinc=8)
      PARAMETER(NDEUT=100)
C
      DIMENSION  P(100),G(100)
      DIMENSION  PCN(0:6),NPW(0:3)
      DIMENSION  GXV(100),WGXV(100)
      DIMENSION  XPHI(100),XWPHI(100)
C
      COMMON /GAUSSK/  PMOM(NP2),A(NP2)
      COMMON /GLEX/    GX(NPX),WGX(NPX)
      COMMON /GAPHI/   GPHI(NPHI),WPHI(NPHI)
      COMMON /GLEXin/  GXi(NPXinc),WGXi(NPXinc)
      COMMON /GAPHIin/ GPHIi(NPHIinc),WPHIi(NPHIinc)
      COMMON /SUBT/    PMX
C
      COMMON /BNLSM/   MPROT,MNEUT,MLAMB,MSIGP,MSIGN,MSIGM
      COMMON /AMAS/    AMNUC,AMLAM,AMSIG,AMKAO
      COMMON /AMASR/   RMMU(2),AMYNC(2)
      COMMON /DEUSDQ/  SWAV(NDEUT),DWAV(NDEUT),QDEUT(NDEUT),bindd
      COMMON /HQCP/    HQC,PI
C
      PI    = DACOS(-1.D0)
      HQC   = 197.327053D0

C*    MASS DATA
      MPROT =  938.27231D0
      MNEUT =  939.56563D0
      MLAMB = 1115.63D0
      MSIGP = 1189.37D0
      MSIGN = 1192.55D0
      MSIGM = 1197.43D0
      MKAO  = 493.646D0
C*
C*    CHANGE DIMENSION [MEV] -> [1/FM] ---
      AMNUC = (MPROT+MNEUT)/2.D0            / HQC
      AMLAM = MLAMB                         / HQC
      AMSIG = (MSIGP+2.D0*MSIGN+MSIGM)/4.D0 / HQC
      AMKAO = MKAO                          / HQC
C* ------
      AMYNC(1) = AMLAM + AMNUC
      AMYNC(2) = AMSIG + AMNUC
      RMMU(1)  = AMLAM*AMNUC/AMYNC(1)
      RMMU(2)  = AMSIG*AMNUC/AMYNC(2)
C*
C*    Gauss ponints and weights for the integral Equations  --
      CALL PPTMTV4(P,G,PMX,NPMX,pcn,npw)

      IF(NPMX.NE.NP) STOP ' INCORRECT -- NP'
      DO 2 I=1,NP
        PMOM(I) = P(I)
        A(I)    = G(I)
    2 CONTINUE
C*
C*    -- Gauss ponints and weights for polar angle [ cos(theta) ]  --
      PX1 = -1.D0
      PX3 =  1.D0
      PX2 =  0.58D0
      CALL GAUSS( PX1,PX3,PX2,NPX,GXV,WGXV )
      DO 1 IX=1,NPX
         GX(IX) =  GXV(IX)
        WGX(IX) = WGXV(IX)
    1 CONTINUE
C*
C*    -- Gauss points and weights for azimuthal angle [ phi ]  --
      BPHI = 0.D0
      EPHI = 2.D0 * PI
      DPHI = PI
      CALL GAUSS(BPHI,EPHI,DPHI,NPHI,XPHI,XWPHI)
      DO 3 IPHI=1,NPHI
        GPHI(IPHI) =  XPHI(IPHI)
        WPHI(IPHI) = XWPHI(IPHI)
    3 CONTINUE
C*
C*  Calculation of I!  SQRT(I!) --
      CALL HELFER
      CALL FKLTT
C* 
C*    -- Read the file for Deuteron Wave Function--------
      read(15,998) bindd,NDEUTx
      if (ndeutx.ne.ndeut) stop
      read(15,997) QDEUT
      read(15,997) SWAV
      read(15,997) DWAV
  998 format(3x,d17.10,I5)
  997 format(3x,d17.10)
      CLOSE(15)

C*
C*    Gauss ponints and weights for inclusive polar angle [ cos(theta) ]  --
      PX1 = -1.D0
      PX3 =  1.D0
      PX2 =  0.58D0
      CALL GAUSS( PX1,PX3,PX2,NPXinc,GXV,WGXV )
      DO 10 IX=1,NPXinc
         GXi(IX) =  GXV(IX)
        WGXi(IX) = WGXV(IX)
   10 CONTINUE
C*
C*    Gauss points and weights for inclusive azimuthal angle [ phi ]  --
      BPHI = 0.D0
      EPHI = PI
      DPHI = PI/2.d0
      CALL GAUSS(BPHI,EPHI,DPHI,NPHIinc,XPHI,XWPHI)
      DO 30 IPHI=1,NPHIinc
        GPHIi(IPHI) =  XPHI(IPHI)
        WPHIi(IPHI) = XWPHI(IPHI)
   30 CONTINUE

      return
      END
C
C
C
C     ---1---------2---------3---------4---------5---------6---------7--
C
C* *******************************************************************
      SUBROUTINE INCLUSIVE(JMAX,  CROSSIN)
C* *******************************************************************
C*  This subroutine calculates Inclusive cross section
C*  for the reaction
C*  " GAMMA + D --> K^+ + LAMBDA(SIGMA) + N ".
C*
C*    INPUT in the lab system (deuteron rest frame)
C*         Incoming photon points to the z-axis, and the xz-plane
C*         is chosen as the kaon scattering plane.
C*
C*             EP0 [1/FM] ( PHOTON ENERGY )
C*             PK0 [1/FM] ( KAON MOMENTUM )
C*             THK0 [RAD] ( KAON ANGLE )
C*
C*    OUTPUT -- CROSSIN [nb/MeV/Sr]
C*                     ( INCLUSIVE CROSS SECTION )
C*             JCH=1 -- (LAMBDA , NEUTRON) outgoing channel
C*             JCH=2 -- (SIGMA^0, NEUTRON) 
C*             JCH=3 -- (SIGMA^-, PROTON ) 
C* *******************************************************************
      IMPLICIT REAL*8 (A-H,O-Z)
      parameter(JMAXX=1,LLMAX=JMAXX+1)
      PARAMETER(NDEUT=100)
      PARAMETER(npxinc=16)
      PARAMETER(nphiinc=8)
      parameter(ialmaxx=2+jmaxx*4)
c
      COMPLEX*16 TAU(ialmaxx,-JMAXX:JMAXX,-1:1,3)
      complex*16 TDFL (-1:1,-1:1,-1:1)
     &          ,TDFLZ(-1:1,-1:1,-1:1)
      complex*16 AMPLT(-1:1,-1:1,-1:1,-1:1)
      logical    first
c
      DIMENSION  PYLB(3),QPLB(3)
      dimension  PYCM(3),PP(3),PNLB(3)
      DIMENSION  PDD0(0:3)
      dimension  crossin(3)
c
      COMMON /AMAS/    AMNUC,AMLAM,AMSIG,AMKAO
      COMMON /DEUSDQ/  SWAV(NDEUT),DWAV(NDEUT),QDEUT(NDEUT),bindd
c
      COMMON /GLEXin/  GXi(NPXinc),WGXi(NPXinc)
      COMMON /GAPHIin/ GPHIi(NPHIinc),WPHIi(NPHIinc)
c
      common /kine1/   EP0,PK0,THK0
      common /kine2/   PHOT0(0:3),PKK0(0:3),QT0(0:3),WE2
      COMMON /HQCP/    HQC,PI
c
      data first/.true./
c
      do 1 jch=1,3
        CROSSIN(jch) = 0.D0
    1 continue

C*    4-DIM MOMENTUM ( LAB FRAME )

C*    PHOTON
      PHOT0(0) = EP0
      PHOT0(1) = 0.D0
      PHOT0(2) = 0.D0
      PHOT0(3) = EP0

C*    KAON
      PKK0(1) = PK0 * DSIN(THK0)
      PKK0(2) = 0.D0
      PKK0(3) = PK0 * DCOS(THK0)
      PKK0(0) = DSQRT( AMKAO**2 + PK0**2 )

C*    DEUTERON
      EDD     = 2.D0*AMNUC + bindd/HQC
      PDD0(0) = EDD
      PDD0(1) = 0.D0
      PDD0(2) = 0.D0
      PDD0(3) = 0.D0

C*    MOMENTUM TRANSFER
      QT0(1)  = PHOT0(1) - PKK0(1)
      QT0(2)  = PHOT0(2) - PKK0(2)
      QT0(3)  = PHOT0(3) - PKK0(3)
      QT0(0)  = PHOT0(0) - PKK0(0)

C* Hyperon MOMENTUM ( YN CM FRAME ) --------------------
      WE2 =   ( PDD0(0) + QT0(0) )**2
     &      - ( PDD0(1) + QT0(1) )**2
     &      - ( PDD0(2) + QT0(2) )**2
     &      - ( PDD0(3) + QT0(3) )**2
C*
      P0S =   ( WE2 - ( AMLAM + AMNUC )**2 )
     &       *( WE2 - ( AMLAM - AMNUC )**2 )
     &          /4.D0/WE2
      Q0S =   ( WE2 - ( AMSIG + AMNUC )**2 )
     &       *( WE2 - ( AMSIG - AMNUC )**2 )
     &          /4.D0/WE2
C* ------------------------------------------------------

      if (first) then
        first = .false.
        CALL SPLFAK(QDEUT,NDEUT)
      endif

      CALL YNTMT(JMAX, TAU )

      IF (P0S.LE.0.D0) RETURN

      do 1000 Jch=1,3
        IF(JCH.GE.2 .AND. Q0S.LE.0.D0) RETURN
        IF(JCH.EQ.1) THEN
          PQ0S  = P0S
          XMASS = AMLAM
        ELSEIF(JCH.GE.2) THEN
          PQ0S  = Q0S
          XMASS = AMSIG
        ENDIF
        PQ0=DSQRT(PQ0S)

        DO 800 JPX=1,NPXinc
          DO 800 JPHI=1,NPHIinc
            XACM  = GXi(JPX)
            WXAA  = WGXi(JPX)
            PHICM = GPHIi(JPHI)
            WPHIX = WPHIi(JPHI)
            XASN  = DSQRT(1.D0-XACM**2)

C*          HYPERON MOMENTUM ( YN C.M. FRAME )
            PYCM(1) = PQ0*XASN*DCOS(PHICM)
            PYCM(2) = PQ0*XASN*DSIN(PHICM)
            PYCM(3) = PQ0*XACM
c
C*          HYPERON MOMENTUM ( LAB FRAME )
c
            do i=1,3
              PP(i)=QT0(i)
            enddo
            call LB3mom(PYCM,XMASS,AMNUC,PP,  PYLB,PNLB)
c
C*
C*          HYPERON - NUCLERON RELATIVE MOMENTUM
            C20     = XMASS / (AMNUC + XMASS)
            QPLB(1) = PYLB(1) - C20 * QT0(1)
            QPLB(2) = PYLB(2) - C20 * QT0(2)
            QPLB(3) = PYLB(3) - C20 * QT0(3)
C*
            PYX = PYLB(1)
            PYY = PYLB(2)
            PYZ = PYLB(3)

            QPX = QPLB(1)
            QPY = QPLB(2)
            QPZ = QPLB(3)
C*          ----------------
C*          PWIA without partial wave decomposition
            DO 600 MU1=-1,1,2
              DO 600 MU2=-1,1,2
                DO 600 MDD=-1,1
                  TDFL (MU1,MU2,MDD) = 0.d0
  600             TDFLZ(MU1,MU2,MDD) = 0.d0
C*

            CALL PWIA(PYX,PYY,PYZ,JCH ,TDFL,TDFLZ)

C*          ----------------
C*          PHASE SPASE FACTOR
            CALL PSFAC(P0S,Q0S,JCH,PHSF)
C*
C*          FULL AMPLITUDE
            CALL FULLAMP(JMAX,JCH,QPX,QPY,QPZ,TDFL,TDFLZ,TAU, AMPLT)
C*
C*----------------
C*          Exclusive cross sections  (before integration of angle)
            cros = 0.d0
            DO 700 MU1=-1,1,2
              DO 700 MU2=-1,1,2
                DO 700 MDD=-1,1
                  do 700 IAA=-1,1,2
                    cros = cros + CDABS(AMPLT(MU1,MU2,MDD,IAA))**2
  700       continue

            CROSSEX = PHSF * CROS / 3.D0 / 2.D0
C*
            CROSSIN(JCH)= CROSSIN(JCH) + CROSSEX*WXAA*WPHIX

  800   CONTINUE

c**     phi integration (0-->pi) = (pi--> 2*pi)
        CROSSIN(JCH) = CROSSIN(JCH) * 2.d0

 1000 continue

      RETURN
      END
c
C     ---1---------2---------3---------4---------5---------6---------7--
C
      subroutine LB3mom(p1c,am1,am2,PP,   p1,p2)
      implicit real*8(a-h,o-z)
      dimension p1(3),p2(3),pp(3),p1c(3)
c*
c*     lab... p1(3), p2(3)    mass....am1, am2
c*            pp(3) (pp=p1+p2)
c*
c*     cm ... p1c(3)
c*            p1cmg is the magnitude of p1c(3)
c*     
      p1cmg = dsqrt(p1c(1)**2 + p1c(2)**2 + p1c(3)**2)
      E1p   = dsqrt(p1cmg**2+am1**2)
      E2p   = dsqrt(p1cmg**2+am2**2)
      W     = E1p + E2p
c
      ppm=dsqrt(pp(1)**2+pp(2)**2+pp(3)**2)
      EE=dsqrt(ppm**2+W**2)
      proj=p1c(1)*pp(1)+p1c(2)*pp(2)+p1c(3)*pp(3)
      E1=( proj+EE*E1p )/W
      E2=(-proj+EE*E2p )/W
c
      eps1=(E1+E1p)/2.d0
      eps2=(E2+E2p)/2.d0
      c1=eps1/(eps1+eps2)
      c2=eps2/(eps1+eps2)
c
      do i=1,3
       p1(i)=  p1c(i) +c1*pp(i)
       p2(i)= -p1c(i) +c2*pp(i)
      enddo
c
      return
      end
C
C
C     ---1---------2---------3---------4---------5---------6---------7--
C
C* ********************************************************************
C* PHASE SPACE FACTOR

      SUBROUTINE PSFAC(P0SA,Q0SA,JCH,PHASP)
      IMPLICIT REAL*8 (A-H,O-Z)
      COMMON /AMAS/  AMNUC,AMLAM,AMSIG,AMKAO
      COMMON /HQCP/  HQC,PI
      common /kine2/ PHOT0(0:3),PKK0(0:3),QT0(0:3),WE2

C*    -- Phase space factor --
      WCE   =  WE2
      PHASP = 0.D0
      IF(JCH.EQ.1) THEN
        XXMS  = AMLAM
        PP0XX = P0SA
      ELSEIF(JCH.EQ.2) THEN
        XXMS  = AMSIG
        PP0XX = Q0SA
      ENDIF

      IF(PP0XX.LT.1.D-10) RETURN

      PP0X = DSQRT(PP0XX)
C*
      Eg  = PHOT0(0)
      Ek  = PKK0(0)
      PKS = PKK0(1)**2+PKK0(2)**2+PKK0(3)**2
      PHASPA
     &    =   1.D0/(2.D0*PI)**2
     &      * 1.D0/(2.D0*Eg)
     &      * XXMS * AMNUC
     &      * PKS
     &      * 1.D0/(2.D0*Ek)
     &      * PP0X/DSQRT(WCE)   /HQC

C*    fermi^2 --> nano-barn
      PHASP = 1.D7 *PHASPA
C*
      RETURN
      END
C
C     ---1---------2---------3---------4---------5---------6---------7--
C* ==================================================================
      SUBROUTINE FULLAMP( JMAX,JCH,QPX,QPY,QPZ
     &                       ,TDFL,TDFLZ,TAU , AMPLT )
C* ==================================================================
      IMPLICIT REAL*8 (A-H,O-Z)
      parameter(JMAXX=1,LLMAX=JMAXX+1)
      parameter(ialmaxx=2+jmaxx*4)
c
      complex*16 TDFL (-1:1,-1:1,-1:1)
     &          ,TDFLZ(-1:1,-1:1,-1:1)
      complex*16 AMPLT(-1:1,-1:1,-1:1,-1:1)
      COMPLEX*16 TAU(ialmaxx,-JMAXX:JMAXX,-1:1,3)
      complex*16 FISAMP(-1:1,-1:1,-1:1,-1:1), PWIA, EXPF(-LLMAX:LLMAX)
      COMPLEX*16 ZI
      DIMENSION  THLM(0:LLMAX,-LLMAX:LLMAX)

      COMMON /HQCP/ HQC,PI
      common /LSJ/ INDEXL(ialmaxx),INDEXS(ialmaxx),INDEXJ(ialmaxx)
     &            ,ialmax 
C
      ZI = DCMPLX(0.D0,1.D0)

C***  Y-N RELATIVE MOMENTUM
      QPABS = DSQRT(QPX**2+QPY**2+QPZ**2)
      IF (QPABS.LT.1.D-10) THEN
        write(11,500)
  500   format(/1x,' Channel is not open')
        stop
      ELSE
        CSTH = QPZ / QPABS
      ENDIF
c
      if ( DABS(CSTH).eq.1.d0) then
        csph = 1.d0
        snph = 0.d0
      else
        CSPH = QPX/QPABS/DSQRT(1.D0-CSTH**2)
        SNPH = QPY/QPABS/DSQRT(1.D0-CSTH**2)
      endif

C* -- SPHERICAL HARMONICS --
      DO 10 LM=0,LLMAX
         EXPF( LM)= ( CSPH + ZI*SNPH )**LM
         EXPF(-LM)= ( CSPH - ZI*SNPH )**LM
  10  CONTINUE
      CALL SPHERX(CSTH,JMAX+1,THLM)

C* -- FSI ----  -------
      do 100 INPH=-1,1,2
        DO 100 MU1=-1,1,2
          DO 100 MU2=-1,1,2
            DO 100 MDD=-1,1
              FISAMP(MU1,MU2,MDD,INPH) = 0.D0
              IF (jmax.EQ.-1) GOTO 1000
              do 110 ial=1,ialmax
                JJ =indexj(ial)
                ISS=indexs(ial)
                LL =indexl(ial)
                DO 110 MMF=-JJ,JJ
                  MMS = (MU1+MU2)/2
                  MML =  MMF-MMS
                  IF(IABS(MML).GT.LL) GOTO 120
                  FISAMP(MU1,MU2,MDD,INPH) =
     &            FISAMP(MU1,MU2,MDD,INPH)
     &          +   CGC(1   ,1    ,ISS*2,MU1  ,MU2  ,MMS*2)
     &            * CGC(LL*2,ISS*2,JJ*2 ,MML*2,MMS*2,MMF*2)
     &            * THLM(LL,MML)
     &            * TAU(ial,MMF,MDD,JCH)
     &            * EXPF(MML*INPH)
c*                 remark INPH is multiplied  

  120             CONTINUE
  110         CONTINUE
 1000         CONTINUE
  100 CONTINUE
c
c
      do 200 IAA=-1,1,2 
        DO 200 MU1X=-1,1,2
          DO 200 MU2X=-1,1,2
            DO 200 MDDX=-1,1
              INPH = IAA
              if(INPH.eq.-1) then
                MU1  = -MU1X
                MU2  = -MU2X
                MDD  = -MDDX
                PWIA =  TDFLZ(MU1,MU2,MDD)
                MMS  =  (MU1+MU2)/2
                FAC  =  (-1)**(MDD-MMS)
              else
                MU1  = MU1X
                MU2  = MU2X
                MDD  = MDDX
                PWIA = TDFL (MU1,MU2,MDD)
                FAC = 1.d0
              endif
              AMPLT(MU1X,MU2X,MDDX,IAA) =
     &             (PWIA + FISAMP(MU1,MU2,MDD,INPH) )*FAC
  200 continue
c
      return
      END
C
********************************************************************
      SUBROUTINE PWIA(PYXA,PYYA,PYZA
     &                       ,ICHX ,TDFL,TDFLZ )
********************************************************************
C*    PWIA without partial wave decomposition
C*
C*    INPUT -- EP0 [1/fm] ,PK0 [1/fm] ,THK0 [rad.]
c*             PYXA,PYYA,PYZA
C*            ,ICHX,MU1,MU2,MD
C*    OUTPUT -- TDFL,TDFLZ
C*
********************************************************************
c*
      IMPLICIT REAL*8(A-H,O-Z)
      parameter(JMAXX=1,LLMAX=JMAXX+1)
      COMPLEX*16 EPH(-2:2)
      COMPLEX*16 FLKA(0:1,-1:1),FLKAX(2,0:1,-1:1)
      complex*16 TDFL (-1:1,-1:1,-1:1)
     &          ,TDFLZ(-1:1,-1:1,-1:1)
      COMPLEX*16 TDFLX,TDFLZX
      complex*16 ZI
      COMPLEX*16 ANFL,ANFLZ,ANFK,ANFKZ
      DIMENSION  Q0T(3)
      dimension  THLM(0:LLMAX,-LLMAX:LLMAX),wv(2)
      COMMON /AMAS/   AMNUC,AMLAM,AMSIG,AMKAO
      COMMON /OPEMOD/ modop1,modop2
      common /kine1/  EP0,PK0,THK0
      common /kine2/  PHOT(0:3),PKK(0:3),QT(0:3),WE2
C*
C     ---1---------2---------3---------4---------5---------6---------7--
      PI=DACOS(-1.D0)
      ZI=DCMPLX(0.D0,1.D0)
C* -- PHOTON_IN --
      XXK = PHOT(0)
C* -- KAON_out --
      XXKP= PK0
      THKP= THK0
C*
C     ---------------------------------------------------------------
C      ICH=1  GAM + P -> K+ + LAMB       ICH=4  GAM + P -> K0 + SIG+
C      ICH=2  GAM + N -> K0 + LAMB       ICH=5  GAM + N -> K+ + SIG-
C      ICH=3  GAM + P -> K+ + SIG0       ICH=6  GAM + N -> K0 + SIG0
C     ---------------------------------------------------------------
C     Elementary Amplitude for different models are selected by MOD :
C     KLambda: (1)AW, (2)COTANCH, (3)AS, (4) OVERALL, (5) NEW OVERALL
C              (6)OUR BEST
C     KSigma : (1)COTANCH, (2) OVERALL, (3) NEW OVERALL, (4) OUR BEST
C     ---------------------------------------------------------------
C     The suggested combination of channel and model is
C             channels         model         note
C               1,2              6         OUR BEST MODEL
C               1,2              4         our old model
C               1,2              2         cotanch
C                1               7         Model with D_13 Mis.Res.!!
C             3,4,5,6            4         OUR BEST MODEL
C             3,4,5,6            2       our old model
C     ---------------------------------------------------------------
C     Until now it is not clear whether or not D_13(1895) contributes
C     to KSigma channels. It needs further investigation.
C     ---------------------------------------------------------------
C*
       FLKA(0, 0)=0.D0
       FLKA(1,-1)=0.D0
       FLKA(1, 0)=0.D0
       FLKA(1,+1)=0.D0
C*
      IF(ICHX.EQ.1) THEN
       ICH=1
       MOD=modop1
       AMHYP=AMLAM
      ELSEIF(ICHX.EQ.2) THEN
       ICH=3
       MOD=modop2
       AMHYP=AMSIG
      ELSEIF(ICHX.EQ.3) THEN
       ICH=5
       MOD=modop2
       AMHYP=AMSIG
      ENDIF
       C1=AMHYP/(AMHYP+AMNUC)
       C2=AMNUC/(AMHYP+AMNUC)
c
C* KINEMATICS
C* HYPERON MOMENTUM ( DEUTERON REST FRAME )
      PYX=PYXA
      PYY=PYYA
      PYZ=PYZA
C* NUCLEON-NUCLEON  RELATIVE MOMENTUM ( DEUTERON REST FRAME )
      Q0T(1)=PYX-QT(1)
      Q0T(2)=PYY-QT(2)
      Q0T(3)=PYZ-QT(3)
      P1  =DSQRT(Q0T(1)**2+Q0T(2)**2+Q0T(3)**2)
      IF(P1.eq.0.d0) THEN
        XTH1=1.d0
        cosph1=1.d0
        sinph1=0.d0
      ELSE
        XTH1=Q0T(3)/P1
        if( DABS(XTH1).eq.1.d0) then
           cosph1=1.d0
           sinph1=0.d0
        else
           cosph1=Q0T(1)/p1/dsqrt(1.d0-XTH1**2)
           sinph1=Q0T(2)/p1/dsqrt(1.d0-XTH1**2)
        endif
      ENDIF
C* NUCLEON MOMENTUM ( DEUTERON REST FRAME )
      PNX=Q0T(1)
      PNY=Q0T(2)
      PNZ=Q0T(3)
C* ----------------------------------------------------------------
      IA=1
      DO 20 IKPH=1,2
      IF(IKPH.EQ.2) then
         PNY=-PNY
         PYY=-PYY
      endif
C* -----------------------------------------------------------------
C*
ccc      CALL AMPL(ICH,MOD,XXK,THKP,XXKP,P1N,TH1N,PH1NX,IA,FLKA)
ccc      CALL AMPL(ICH,MOD,XXK,THKP,XXKP,P1N,TH1N,PH1N,PYX,PYY,PYZ,
ccc     &                IA,FLKA)

      CALL AMPLM(ICH,MOD,XXK,THKP,XXKP,PNX,PNY,PNZ,PYX,PYY,PYZ,
     &                IA,FLKA)
C     --------------------------------------------------------------
C                                            FLKA
C                  0            0             L
C                  1            0             K_(0)
C                  1            1             K_(+1)
C                  1           -1             K_(-1)
C     --------------------------------------------------------------
c
      FLKAX(IKPH,0, 0)=FLKA(0, 0)
      FLKAX(IKPH,1, 0)=FLKA(1, 0)
      FLKAX(IKPH,1, 1)=FLKA(1, 1)
      FLKAX(IKPH,1,-1)=FLKA(1,-1)
   20 CONTINUE
c
       call spherx(xth1,2,thlm)
       CALL DEUTNIJX(P1,WV)
c
c
      DO 30 MLA=0,2
      EPH( MLA) =(cosph1 + ZI*sinph1)**MLA
      EPH(-MLA) =(cosph1 - ZI*sinph1)**MLA
   30 CONTINUE
c
c
      DO 1000 MU1=-1,1,2
      DO 1000 MU2=-1,1,2
      DO 1000 MD=-1,1
c*
c*  CALCULATION OF D_L
c*  IA = +1
c*  -phi_N and -phi_{NN} for IA = -1
        ANFL=0.D0
        ANFLZ=0.d0
      DO 101 LL2A=0,2,2
       LL2AD=LL2A
       IF(LL2A.EQ.0) LL2AD=1
        MSL=(MU1+MU2)/2
        MLL=MD-MSL
        ANF= CGC(1     ,1,2,MU1  ,MU2  ,MSL*2)
     &      *CGC(LL2A*2,2,2,MLL*2,MSL*2,MD*2 )
     &      *thlm(LL2A,MLL)*WV(LL2AD)
        ANFL = ANFL +FLKAX(1,0,0)*ANF*EPH( MLL)
        ANFLZ= ANFLZ+FLKAX(2,0,0)*ANF*EPH(-MLL)
  101 CONTINUE
c
c*
c*  CALCULATION OF D_K
c*  IA= +1
c*   -phi_N and -phi_{NN} for IA = -1
         ANFK=0.D0
         ANFKZ=0.D0
      DO 201 LL2A=0,2,2
        LL2AD=LL2A
        IF(LL2A.EQ.0) LL2AD=1

      DO 203 IRC=-1,1

        MSPK=(MU1+MU2)/2
        MSK=MSPK-IRC

        if(iabs(MSK).gt.1) goto 203
       DO 202 ISP=0,1
   
        MLK=MD-MSK
        ANF= CGC(1     ,1,ISP*2,MU1  ,MU2  ,MSPK*2)
     &      *CGC(LL2A*2,2,2    ,MLK*2,MSK*2,MD*2  )
     &      *CGC(2     ,2,ISP*2,IRC*2,MSK*2,MSPK*2)
     &      *C6J(ISP*2,2,2,1,1,1)
     &      *(-1.D0)**(ISP+IRC) *3.D0*DSQRT(2.D0)
     &      *thlm(LL2A,MLK)*WV(LL2AD)
        ANFK =ANFK  +FLKAX(1,1,-IRC)*ANF*EPH( MLK)
        ANFKZ=ANFKZ +FLKAX(2,1,-IRC)*ANF*EPH(-MLK)

  202 CONTINUE
  203 CONTINUE
c
  201 CONTINUE
c
c
       TDFLX =ZI*ANFL +ANFK
       TDFLZX=ZI*ANFLZ+ANFKZ
       IF(ICHX.EQ.3) THEN    !  for the antisymmetrization of NN 
         TDFLX =-TDFLX       !  in the deuteron
         TDFLZX=-TDFLZX
       ENDIF
c
       TDFL (MU1,MU2,MD)=TDFLX
       TDFLZ(MU1,MU2,MD)=TDFLZX
 1000 continue
c
      return
      END
C
C
C     ---1---------2---------3---------4---------5---------6---------7--
C
C* ******************************************************************
      SUBROUTINE YNTMT(JMAX,  TAU )
C* ******************************************************************
      IMPLICIT REAL*8 (A-H,O-Z)
      PARAMETER(NP=35,NK=2*NP,NKK=4*NP)
      PARAMETER(NP2=NP+2,NK2=NK+2)
      PARAMETER(NDEUT=100)
      parameter(JMAXX=1,LLMAX=JMAXX+1)
      parameter(ialmaxx=2+jmaxx*4)
C*  --
      LOGICAL     COUPL
      COMPLEX*16  THS,THSC
      complex*16  RTHS(3), RTHSC(2,3)
      COMPLEX*16  TAU(ialmaxx,-JMAXX:JMAXX,-1:1,3)
      dimension   cg(3,2)
      common /corr/ THS (2,2,-JMAXX:JMAXX,-1:1)
     &             ,THSC(4,2,-JMAXX:JMAXX,-1:1)
      COMMON /GAUSSK/ PMOM(NP2),A(NP2)
      COMMON /AMAS/ AMNUC,AMLAM,AMSIG,AMKAO
      COMMON /AMASR/ RMMU(2),AMYNC(2)
      common /LSJ/INDEXL(ialmaxx),INDEXS(ialmaxx),INDEXJ(ialmaxx)
     &           ,ialmax 
cc      COMMON /DEUSDQ/ SWAV(NDEUT),DWAV(NDEUT),QDEUT(NDEUT),bindd
      common /kine2/PHOT0(0:3),PKK0(0:3),QT0(0:3),WE2
C*
C* -- On shell momentum -----------------------------------
C*   ( yn cm FRAME )
C*     non rela
         P0S=( DSQRT(WE2) - AMLAM - AMNUC )*2.D0*RMMU(1)
         Q0S=( DSQRT(WE2) - AMSIG - AMNUC )*2.D0*RMMU(2)
        P0 =0.D0
        Q0 =0.D0
      IF(P0S.GT.0.D0)  P0 =DSQRT(P0S)
      IF(Q0S.GT.0.D0)  Q0 =DSQRT(Q0S)
C*
         PMOM(NP+1)=P0
         PMOM(NP+2)=Q0
C* ---------------------------
      IF(jmax.EQ.-1) return
c
C*  Operater
      CALL LKcal(jmax)
C* ------------------------------------------
      DO 1 ITS=1,2
           ITS1=2*(ITS-1)+1
           cg(2,ITS)= CGC(2,1,ITS1,0,-1,-1)
           cg(3,ITS)= CGC(2,1,ITS1,-2,1,-1)
    1 CONTINUE
C*---- Loop ---
      ial=0
      DO 10 J=0,JMAX
      DO 10 IIS=0,1
         JL=J
         IF(J.EQ.0) JL=J+IIS
      DO 10 L=IABS(J-IIS),JL
         ial=ial+1 
         INDEXL(ial)=L
         INDEXS(ial)=IIS
         INDEXJ(ial)=J
c
          COUPL=.FALSE.
        IF( L.EQ.J-1 )  THEN
          COUPL=.TRUE.
          ial=ial+1 
          INDEXL(ial)=L+2
          INDEXS(ial)=IIS
          INDEXJ(ial)=J
         ENDIF
c
      do 33 md=-1,1
      do 33  mf=-JMAXX,JMAXX
      DO 31 I2=1,2
      DO 31 I1=1,2
         THS(I2,I1,mf,md)=0.D0
   31 CONTINUE
      DO 32 I2=1,4
      DO 32 I1=1,2
         THSC(I2,I1,mf,md)=0.D0
   32 CONTINUE
   33 continue
c
      IF(Q0S.LT.0.D0) THEN
              CALL TMTRX1(L,IIS,J, COUPL, RMMU ,P0S,Q0S)
      ELSE
              CALL TMTRX1(L,IIS,J, COUPL, RMMU ,P0S,Q0S)
              CALL TMTRX3(L,IIS,J, COUPL, RMMU ,P0S,Q0S)
      ENDIF
c
C*---------------------------------------------------------
C*   T - MATRIX ( Isospin base )   [ fm^(5/2) ]
C*       iso=1:  Total Isospin = 1/2 ( I3=-1/2 )
C*       iso=2:                  3/2 ( I3=-1/2 )
C*
C*     THS (HY,iso)   --   UNCOUPLED PARTIAL WAVE
C*        HY=1 : Lamda
C*        HY=2 : Sigma
C*
C*     THSC(HY_SD,iso) --   COUPLED  PARTIAL WAVE
C*        HY_SD=1 : Lamda L=J-1
C*        HY_SD=2 : Sigma L=J-1
C*        HY_SD=3 : Lamda L=J+1
C*        HY_SD=4 : Sigma L=J+1
C*---------------------------------------------------------
c
      do 30  md=-1,1
      do 30  mf=-j,j
C*---------------------------------------------------------
C* ISOSPIN BASE --> PARTICLE BASE
C*  << ON SHELL >>
C*  LAMBDA
       LD=1
       RTHS (     1)= THS (1,1,mf,md)
       RTHSC(LD  ,1)= THSC(1,1,mf,md)
       RTHSC(LD+1,1)= THSC(3,1,mf,md)
C*  SIGMA
       do 26 ich=2,3
       RTHS (     ich)=0.D0
       RTHSC(LD  ,ich)=0.D0
       RTHSC(LD+1,ich)=0.D0
   26  continue
      DO 25 ITS=1,2
       RTHS(      2)= RTHS(     2) +cg(2,ITS)*THS(2,ITS,mf,md)
       RTHS(      3)= RTHS(     3) +cg(3,ITS)*THS(2,ITS,mf,md)
c
       RTHSC(LD,  2)=RTHSC(LD,  2)+cg(2,ITS)*THSC(2,ITS,mf,md)
       RTHSC(LD,  3)=RTHSC(LD,  3)+cg(3,ITS)*THSC(2,ITS,mf,md)
       RTHSC(LD+1,2)=RTHSC(LD+1,2)+cg(2,ITS)*THSC(4,ITS,mf,md)
       RTHSC(LD+1,3)=RTHSC(LD+1,3)+cg(3,ITS)*THSC(4,ITS,mf,md)
   25 CONTINUE
C* ----------------------------------------------------------
C*   T-MATRIX ( particle base )
C*        1 : Lambda - Neutron
C*        2 : Sigma(0) - Neutron
C*        3 : Sigma(-) - Proton
C* ----------------------------------------------------------
        IF(.not.COUPL) then
           do 27 ich=1,3     
ccc             TAU(L,IIS,J,MF,MD,ich)=RTHS(ich)
             TAU(ial,MF,MD,ich)=RTHS(ich)
   27      continue       
        else
           do 28 ich=1,3
ccc             TAU(L  ,IIS,J,MF,MD,ich)=RTHSC(L  ,ich)
ccc             TAU(L+2,IIS,J,MF,MD,ich)=RTHSC(L+2,ich)
             TAU(ial-1,MF,MD,ich)=RTHSC(LD  ,ich)
             TAU(ial  ,MF,MD,ich)=RTHSC(LD+1,ich)
   28      continue
        endif
   30 continue
c
   10 CONTINUE
      ialmax=ial
      if(ialmax .ne. 2+jmax*4) then
        write(11,*) 'ialmax is wrong'
        stop
      endif
c      write(11,*) 'ialmax= ',ialmax
C===============================================
c
      return
      END
C
C
C     ---1---------2---------3---------4---------5---------6---------7--
C
      SUBROUTINE DRIVE2( IL,IS,JF, MF,MD, COUPL
     &                         ,DRVA,DRVA3, KNPY )
***********************************************************
C*  Driving term calculation
C* --------------------------------------------------------
C*  Total Isospin = 1/2 ( I3=-1/2 )
C*    DRVA(*,**)
C*     '*' is 1 or 2
C*       1 -- Partial wave ( L )
C*       2 --      ,,      ( L+2 )
C*     '**' is 1 or 2
C*       1 -- Lambda N , 2 -- Sigma N  chanel
C*  Total Isospin = 3/2 ( I3=-1/2 )
C*    DRVA3(*)
C*     '*' is 1 or 2
C*       1 -- Partial wave ( L )
C*       2 --      ,,      ( L+2 )
C* -------------------------------------------------------
C*    DRXA(*,**)
C*     '*' is 1 or 2
C*       1 -- Partial wave ( L )
C*       2 --      ,,      ( L+2 )
C*     '**' is 1 - 3
C*       1 : Gamma + p --> K(+) + Lambda
C*       2 : Gamma + p --> K(+) + Sigma(0)
C*       3 : Gamma + n --> K(+) + Sigma(-)
***********************************************************
c*
      IMPLICIT REAL*8(A-H,O-Z)
c**      PARAMETER (IA=1)
      PARAMETER (npx=16)
      PARAMETER (nphi=14)
      PARAMETER (NP=35,NP2=NP+2,NK2=2*NP+2)
      parameter (JMAXX=1,LLMAX=JMAXX+1)
      COMPLEX*16 ZI
      complex*16 DRVA(2,2),DRVA3(2),DRXA(2,3)
      COMPLEX*16 ANGIL,ANGIK
      LOGICAL    COUPL
      COMMON/ FKLPM/ ANGIL(     -LLMAX:LLMAX,-2:2,0:LLMAX,0:2,3,np+1)
     &              ,ANGIK(-1:1,-LLMAX:LLMAX,-2:2,0:LLMAX,0:2,3,np+1)
c*
      ZI =DCMPLX(0.D0,1.D0)
c*
       DO 1 LX=1,2
       DO 1 ICH=1,2
    1   DRVA(LX,ICH)=0.D0
        DRVA3(1)=0.D0
        DRVA3(2)=0.D0
c*
       DO 2 LX=1,2
       DO 2 ICH=1,3
    2   DRXA(LX,ICH)=0.D0
c*
       IF(KNPY.LE.NP) THEN
       ICHMIN=1
       ICHMAX=1
       KNPYA=KNPY
       ELSEIF(NP+1.LE.KNPY .AND. KNPY.LE.2*NP) THEN
       ICHMIN=2
       ICHMAX=3
       KNPYA=KNPY-NP
       ELSEIF(KNPY.EQ.2*NP+1) THEN
       ICHMIN=1
       ICHMAX=1
       KNPYA=NP+1
       ELSEIF(KNPY.EQ.2*NP+2) THEN
       ICHMIN=2
       ICHMAX=3
       KNPYA=NP+1
       ENDIF
c*
      DO 100 ICH=ICHMIN,ICHMAX
                  KLL1=1
        IF(COUPL) KLL1=2
      DO 100 KLL1A=1,KLL1
                       LL1A=IL
        IF(KLL1A.EQ.2) LL1A=IL+2
c*
C* ==  D_L ==
      IF(IS.NE.1) GOTO 17
      DO 15 ILD=0,2,2
      DO 15 ILM=-ILD,ILD
            IMP =ILM+MF-MD
            MSFF=MD-ILM
        CGC1L=CGC( LL1A*2, 2, JF*2, IMP*2, MSFF*2, MF*2 )
        CGC2L=CGC(  ILD*2, 2,    2, ILM*2, MSFF*2, MD*2 )
       DRXA(KLL1A,ICH)=DRXA(KLL1A,ICH)
     &        +ANGIL(IMP,ILM,LL1A,ILD,ich,knpya)*CGC1L*CGC2L*ZI
   15  CONTINUE
   17  CONTINUE
c*
C* ==  D_K ==
      DO 16 ILD =0,2,2
      DO 16 ILM=-ILD,ILD
      DO 16 IRC = -1,1
            IMP = MF-MD+ILM-IRC
            ISD = MD-ILM
            MSFF= MF-IMP
        CGC1K=CGC( LL1A*2, IS*2, JF*2, IMP*2, MSFF*2,   MF*2 )
        CGC2K=CGC(  ILD*2,    2,    2, ILM*2,  ISD*2,   MD*2 )
        CGC3K=CGC(      2,    2, IS*2, IRC*2,  ISD*2, MSFF*2 )
        C6J1K=C6J( IS*2,2,2, 1,1,1 )
       DRXA(KLL1A,ICH)=DRXA(KLL1A,ICH)
     &         + ANGIK(IRC,IMP,ILM,LL1A,ILD,ich,knpya)
     &                   *CGC1K*CGC2K*CGC3K*C6J1K*(-1.D0)**(IS+IRC)
     &                   *3.D0*DSQRT(2.D0)
   16  CONTINUE
c*
  100 CONTINUE
c* ----------------------------------------------------------------
       DRVA(1,1)= DRXA(1,1)
       DRVA(2,1)= DRXA(2,1)
      DO 20 I3W=1,2
       DRVA (I3W,2)=DRXA(I3W,2)
       DRVA3(I3W)  =DRXA(I3W,3)
   20 CONTINUE
c*
      return
      END
C
C
C     ---1---------2---------3---------4---------5---------6---------7--
C
      SUBROUTINE LKcal(jmax)
***************************************************************
C* BRIDGE PROGRAM FOR KAON_OPERATOR
***************************************************************
      IMPLICIT REAL*8(A-H,O-Z)
      PARAMETER(npx=16)
      PARAMETER(nphi=14)
      PARAMETER(NP=35,NP2=NP+2,NK2=2*NP+2)
      parameter(JMAXX=1,LLMAX=JMAXX+1)
c*
      complex*16 FLKA(0:1,-1:1),FLL(3),FKK(-1:1,3)
     &                         ,FLX(3),FKX(-1:1,3)
c**      complex*16 ANFL,ANFK
      complex*16 cint
      complex*16 ANGIL,ANGIK
      complex*16 ZI
      dimension QQP(3),QQ(3,3)
      dimension DWV(2),THLM1(0:LLMAX,-LLMAX:LLMAX)
     &                ,THLM2(0:LLMAX,-LLMAX:LLMAX)
      dimension cg(3,3)
      COMMON/ FKLPM/ ANGIL(     -LLMAX:LLMAX,-2:2,0:LLMAX,0:2,3,np+1)
     &              ,ANGIK(-1:1,-LLMAX:LLMAX,-2:2,0:LLMAX,0:2,3,np+1)
      COMMON/GAUSSK/PMOM(NP2),A(NP2)
      COMMON /GLEX/GX(NPX),WGX(NPX)
      COMMON /GAPHI/GPHI(NPHI),WPHI(NPHI)
      COMMON /AMAS/ AMNUC,AMLAM,AMSIG,AMKAO
      COMMON/OPEMOD/ modop1,modop2
      common /kine1/EP0,PK0,THK0
      common /kine2/PHOT0(0:3),PKK0(0:3),QT0(0:3),WE2
c*
C* -- PHOTON --
      XXK = EP0
C* -- POLARIZATION --
      INPOL= 1
C* -- KAON --
      XXKP= PK0
      THKP= THK0
C*
      do 30 i3=2,3
        I3A=2-I3
        CG(2,i3)=CGC(2,1,1, I3A*2, -1-2*I3A, -1)
        CG(3,i3)=CGC(2,1,3, I3A*2, -1-2*I3A, -1)
   30 continue
c*
      ZI =DCMPLX(0.D0,1.D0)
      do 10 inp=1,np+1
      do 10 ichx=1,3
      do 10 L2=0,2
      do 10 L1=0,LLMAX
      do 10 ML2=-2,2
      do 10 ML1=-LLMAX,LLMAX
        ANGIL( ML1,ML2 ,L1,L2,ichx,inp)=0.d0
      do 10 irc=-1,1
        ANGIK( IRC,ML1,ML2,L1,L2,ichx,inp)=0.d0
  10  continue
c*
      DO 100 INPX=1,NPX
          TX1 = GX(INPX)
          TX1R= DSQRT(1.D0- TX1*TX1)
         call SPHERX(tx1,jmax+1,THLM1)
      DO 100 IPHI=1,NPHI
         TXP = GPHI(IPHI)
         cosp1=dcos(txp)
         sinp1=dsin(txp)
      DO 100 INP =1,NP+1
         PY = PMOM(INP)
c*
      DO 20 ICHX=1,3
C
C    ---------------------------------------------------------------
C     ICH=1  GAM + P -> K+ + LAMB       ICH=4  GAM + P -> K0 + SIG+
C     ICH=2  GAM + N -> K0 + LAMB       ICH=5  GAM + N -> K+ + SIG-
C     ICH=3  GAM + P -> K+ + SIG0       ICH=6  GAM + N -> K0 + SIG0
C    ---------------------------------------------------------------
C    Elementary Amplitude for different models are selected by MOD :
C    KLambda: (1)AW, (2)COTANCH, (3)AS, (4) OVERALL, (5) NEW OVERALL
C             (6)OUR BEST
C    KSigma : (1)COTANCH, (2) OVERALL, (3) NEW OVERALL, (4) OUR BEST
C    ---------------------------------------------------------------
C    The suggested combination of channel and model is
C            channels         model         note
C              1,2              6         OUR BEST MODEL
C              1,2              4         our old model
C              1,2              2       cotanch
C            3,4,5,6            4         OUR BEST MODEL
C            3,4,5,6            2       our old model
C    ---------------------------------------------------------------
c*
      IF(ICHX.EQ.1) THEN
       ICH=1
       MOD=modop1
       AMHYP=AMLAM
      ELSEIF(ICHX.EQ.2) THEN
       ICH=3
       MOD=modop2
       if(inp.eq.np+1) py=PMOM(NP+2)
       AMHYP=AMSIG
      ELSEIF(ICHX.EQ.3) THEN
       ICH=5
       MOD=modop2
       if(inp.eq.np+1) py=PMOM(NP+2)
         AMHYP=AMSIG
      ENDIF
         C10= AMHYP/(AMHYP+AMNUC)
         C20= AMNUC/(AMHYP+AMNUC)
C* --------------------------------------------------------
C* DEUTERON REST FRAME
C* --------------------------------------------------------
C* HYPERON-NUCLEON RELATIVE MOMENTUM
      QQP(1) = PY*TX1R*DCOS(TXP)
      QQP(2) = PY*TX1R*DSIN(TXP)
      QQP(3) = PY*TX1
c*
C* Nuleon-Nucleon RELATIVE MOMENTUM
      QQ(1,ichx) = QQP(1) - C20*QT0(1)
      QQ(2,ichx) = QQP(2) - C20*QT0(2)
      QQ(3,ichx) = QQP(3) - C20*QT0(3)
c*
C* ---- HYPERON MOMENTUM ------------------
      PYX = QQP(1) + C10*QT0(1)
      PYY = QQP(2) + C10*QT0(2)
      PYZ = QQP(3) + C10*QT0(3)
*
C* ---- NUCLEON MOMENTUM ------------------
      PNX = QQP(1) - C20*QT0(1)
      PNY = QQP(2) - C20*QT0(2)
      PNZ = QQP(3) - C20*QT0(3)
C*-------------------------------------------
C    operator
       FLKA(0, 0)=0.D0
       FLKA(1,-1)=0.D0
       FLKA(1, 0)=0.D0
       FLKA(1,+1)=0.D0
C* -------------------------------------------------------------
      if( DABS(PY).gt.1.D-10 )
c*      CALL AMPL(ICH,MOD,XXK,THKP,XXKP,P1,TH1,PH1,INPOL,FLKA)
     & CALL AMPLM(ICH,MOD,XXK,THKP,XXKP,PNX,PNY,PNZ,PYX,PYY,PYZ,
     &                INPOL,FLKA)
C* -------------------------------------------------------------
      FLX(   ichx)=FLKA(0, 0)
      FKX(-1,ichx)=FLKA(1,-1)
      FKX( 0,ichx)=FLKA(1, 0)
      FKX( 1,ichx)=FLKA(1, 1)
   20 CONTINUE
C ----------------------------------------------------------
C    PARTICLE BASE --> ISOSPIN BASE
C
C    Reamrk !! change sign for ICH=3
C   Because of the antisymmetry of the deuteron.
C      | d > = | pn > - | np >
C
      FLX(   3)=-FLX(   3)
      FKX(-1,3)=-FKX(-1,3)
      FKX( 0,3)=-FKX( 0,3)
      FKX( 1,3)=-FKX( 1,3)
c* -----------------------------------------------------------
        FLL(1)=FLX(1)
        FLL(2)=CG(2,2)*FLX(2)+CG(2,3)*FLX(3)
        FLL(3)=CG(3,2)*FLX(2)+CG(3,3)*FLX(3)
c*
      do 31 i=-1,1
        FKK(i,1)=FKX(i,1)
        FKK(i,2)=CG(2,2)*FKX(i,2)+CG(2,3)*FKX(i,3)
        FKK(i,3)=CG(3,2)*FKX(i,2)+CG(3,3)*FKX(i,3)
   31 continue
c* -----------------------------------------------------------
C
      do 50 ichx=1,3
c*
      QQABS= dsqrt(QQ(1,ichx)**2+QQ(2,ichx)**2+QQ(3,ichx)**2)
      IF(QQABS.eq.0.d0) then
        cost=1.d0
        cosp2=1.d0
        sinp2=0.d0
      ELSE
        cost=QQ(3,ichx)/QQABS
        if( dabs(cost).eq.1.d0) then
          cosp2=1.d0
          sinp2=0.d0
        else
          cosp2=QQ(1,ichx)/QQABS/dsqrt(1.d0-cost*cost)
          sinp2=QQ(2,ichx)/QQABS/dsqrt(1.d0-cost*cost)
        endif
      ENDIF
      if(ichx.le.2) then
        call SPHERX(cost,2,THLM2)
        call DEUTNIJX(QQABS,  DWV)
      endif
c*
      DO 51 LL2A=0,2,2
         LL2AD=LL2A
         IF(LL2A.EQ.0) LL2AD=1
      do 51 LL1A=0,jmax+1
      DO 51 MLD=-LL2A,LL2A
      do 51 mlf=-LL1A,LL1A
         CINT=
     &   DCONJG( THLM1(LL1A,MLF)*(cosp1+zi*sinp1)**mlf )
     &          *THLM2(LL2A,MLD)*(cosp2+zi*sinp2)**mld *DWV(LL2AD)
     &          *WGX(INPX)*WPHI(IPHI)
C ==  D_L calculation ==
        ANGIL(mlf,MLD,LL1A,LL2A ,ichx,inp)
     &          = ANGIL(mlf,MLD,LL1A,LL2A ,ichx,inp)
     &                     + FLL(ichx)*cint
C
C == D_K calculation==
       DO 52 IRC=-1,1
        ANGIK( IRC,mlf,MLD,LL1A,LL2A, ichx,inp )
     &          =   ANGIK( IRC,mlf,MLD,LL1A,LL2A, ichx,inp )
     &              + FKK(-IRC,ICHx)*cint
   52  CONTINUE
   51  CONTINUE
   50 continue
C
C
  100 continue
C
      return
      END
C
C     ---1---------2---------3---------4---------5---------6---------7--
C *******************************************************************
      SUBROUTINE SPHERX(costh, LMAX, THLM)
C ----------------------------------------------------------------
C      SPHERICAL HARMONICS =THLM(LM)*EXP(i*M*PHI)
      IMPLICIT REAL*8(A-H,O-Z)
c*
      parameter(JMAXX=1,LLMAX=JMAXX+1)
      PARAMETER(LHIFA=29)
c*
      DIMENSION  PL  (0:LLMAX,0:LLMAX)
      dimension  THLM(0:LLMAX,-LLMAX:LLMAX)
      COMMON /FACUL/ F(0:LHIFA),SF(0:LHIFA)
C*
      PI=DACOS(-1.D0)
      do 1 L=0,LLMAX
      do 1 M=-LLMAX,LLMAX
          THLM(L,M)=0.d0
    1 continue
C* --------------------------------
C*   LEGENDRE FUNCTION
C* --------------------------------
      X1= costh
      CALL LEGDRE (X1,LMAX,PL)
C*
      DO 10 M=0,LMAX
      DO 10 L=M,LMAX
          THLM(L, M)=(-1)**M
     &       *DSQRT((2.D0*L+1.D0)/(4.D0*PI)*F(L-M)/F(L+M))
     &       *PL(L,M)
   10 CONTINUE
c*
      if(LMAX.eq.0) return
      DO 11 M=1,LMAX
      DO 11 L=M,LMAX
           THLM(L,-M)=(-1)**M *THLM(L,M)
   11 CONTINUE
      return
      end
C*
C     ---1---------2---------3---------4---------5---------6---------7--
C* ********************************************************
      SUBROUTINE LEGDRE (X,LMAX,P)
      IMPLICIT REAL*8(A-H,O-Z)
      parameter(JMAXX=1,LLMAX=JMAXX+1)
      DIMENSION P(0:LLMAX,0:LLMAX)
c**      DIMENSION P(0:LMAX,0:LMAX)
c*
      P(0,0)=1.D0
      IF(LMAX.EQ.0) RETURN
c*
      H=DSQRT(1.D0-X*X)
      DO 1 M=1,LMAX
        P(M,M)=(2.D0*M-1.D0)*H*P(M-1,M-1)
    1 CONTINUE
c*
      DO 2 M=0,LMAX-1
        P(M+1,M)=(2*M+1)*X*P(M,M)
        IF(LMAX.GT.1 .AND. M.LT.LMAX-1) THEN
           DO 3 L=M+1,LMAX-1
              P(L+1,M)=((2*L+1)*X*P(L,M)-(L+M)*P(L-1,M))
     .                 /(L-M+1.D0)
    3      CONTINUE
        ENDIF
    2 CONTINUE
      return
      END

C*
C     ---1---------2---------3---------4---------5---------6---------7--
C* ******************************************************************
       SUBROUTINE  DEUTNIJX(qinter,  WV)
C* ******************************************************************
C
C     read deuteron wavefunction made by sgl2n93.f
C                                 (Nijmegen93 potential)
C     for gamma+d calculation(8/7/98)
C
C     Single precision ---> Double precision
C         1998. 8. 8  BY. H.YAMAMURA
C
      IMPLICIT REAL*8 (A-H,O-Z)
      PARAMETER (NDEUT=100)
      DIMENSION  WAVE(NDEUT,2),TEMP(NDEUT)
      dimension  WV(2)
      COMMON /DEUSDQ/ SWAV(NDEUT),DWAV(NDEUT),QDEUT(NDEUT),bindd
      EQUIVALENCE (SWAV,WAVE(1,1)),(DWAV,WAVE(1,2))
cc*
c*tes      CALL SPLFAK(QDEUT,NDEUT)
       DO 200 L=1,2
         CALL SPLMOD(QDEUT,NDEUT,qinter,TEMP)
         WV(L)=0.d0
         DO 210 I=1,NDEUT
          WV(L)=WV(L)+TEMP(I)*WAVE(I,L)
  210    CONTINUE
  200 CONTINUE
C*
      return
      end
C
C
C
C     ---1---------2---------3---------4---------5---------6---------7--
C *******************************************************************
         SUBROUTINE TMTRX3(L,IS,JJ, KOPPEL ,RMMU ,P0S,Q0S)
C *******************************************************************
C
      IMPLICIT REAL*8(A-H,O-Z)
      PARAMETER(NP=35,NK=2*NP,NK3=3*NP,NKK=4*NP
     .         ,NK2=NK+2,NKK4=NKK+4)
      PARAMETER(NP2=NP+2)
c**
      parameter(JMAXX=1)
      LOGICAL    KOPPEL
      COMPLEX*16    SBTL,SBTS
      complex*16    V1A,V2A,AS
      COMPLEX*16    T1,T2
      complex*16    DRVA(2,2),DRVA3(2)
      COMPLEX*16    ZL,ZS
      COMPLEX*16    THS,THSC
      DIMENSION     V00(2,2),V02(2,2),V20(2,2),V22(2,2)
      DIMENSION     RMMU(2)
      common /corr/ THS (2,2,-JMAXX:JMAXX,-1:1)
     &             ,THSC(4,2,-JMAXX:JMAXX,-1:1)
      COMMON/VKV/V1(NK2,NK2),V2(NKK4,NKK4)
     &            ,V1A(NK2 ,-JMAXX:JMAXX,-1:1)
     &            ,V2A(NKK4,-JMAXX:JMAXX,-1:1),AS(NKK4)
      COMMON/TKT/T1(NK2 ,-JMAXX:JMAXX,-1:1)
     &          ,T2(NKK4,-JMAXX:JMAXX,-1:1)
      COMMON/GAUSSK/PMOM(NP2),A(NP2)
      COMMON/SUBT/PBAR
      COMMON/HQCP/HQC,PI
c*
      PIHALF=PI/2.D0
        P0=0.D0
        SBTL=0.D0
      IF(P0S.GT.0.) THEN
        P0=DSQRT(P0S)
          ZL=DCMPLX(0.D0,PIHALF*P0)
        DO 1 I=1,NP
        PX=PMOM(I)
    1   SBTL=SBTL-P0S/(PX*PX-P0S)*A(I)
        SBTL=SBTL-DLOG((PBAR+P0)/(PBAR-P0))*P0/2.D0 +ZL
      ENDIF
        Q0=0.D0
        SBTS=0.D0
      IF(Q0S.GT.0.D0) THEN
        Q0=DSQRT(Q0S)
          ZS=DCMPLX(0.D0,PIHALF*Q0)
        DO 2 I=1,NP
        PX=PMOM(I)
    2   SBTS=SBTS-Q0S/(PX*PX-Q0S)*A(I)
        SBTS=SBTS-DLOG((PBAR+Q0)/(PBAR-Q0))*Q0/2.D0+ZS
      ENDIF
      DO 3 I=1,NK2*NK2
    3    V1(I,1)=0.D0
      DO 4 I=1,NKK4*NKK4
    4    V2(I,1)=0.D0
      do 5 md=-1,1
      do 5 mf=-JMAXX,JMAXX
      DO 5 I1=1,NK2
    5    V1A(I1,mf,md)=0.D0
      do 6 md=-1,1
      do 6 mf=-JMAXX,JMAXX
      DO 6 I1=1,NKK4
    6    V2A(I1,mf,md)=0.D0
CC
      IF(KOPPEL) GOTO 500
c*
       DO 10 I=1,NP
           P=PMOM(I)
       DO 10 J=1,I
           PS=PMOM(J)
           CALL POTLSJ3(P,PS,L,IS,JJ,V00,V02,V20,V22,KOPPEL)
           JA=NP+J
           IA=NP+I
              V1(IA,JA)=V00(2,2)/P/PS
   10            V1(JA,IA)=V1(IA,JA)
       IF(Q0S.GT.0.D0) THEN
       DO 12 I=1,NP
           P=PMOM(I)
           CALL POTLSJ3(P,Q0,L,IS,JJ,V00,V02,V20,V22,KOPPEL)
           IA=NP+I
              V1(IA,NK+2)=V00(2,2)/P/Q0
   12              V1(NK+2,IA)=V1(IA,NK+2)
       ENDIF
       IF(Q0S.GT.0.D0) THEN
           CALL POTLSJ3(Q0,Q0,L,IS,JJ,V00,V02,V20,V22,KOPPEL)
             V1(NK+2,NK+2)=V00(2,2)/Q0/Q0
       ENDIF
c*

       DO 13 I=1,NP
           P=PMOM(I)
           IA=NP+I
           AS(I )=A(I)*P*P/(P*P-P0S)
   13      AS(IA)=A(I)*P*P/(P*P-Q0S)
C*
           AS(NK+1)=SBTL
           AS(NK+2)=SBTS
C*
C* --- Driving term V1A(NK2) ------------------
C* -- Off shell --
      do 14 md=-1,1
      do 14 mf=-jj,jj
      DO 15 I=NP+1,2*NP
         CALL DRIVE2( L,IS,JJ,MF,MD,KOPPEL,DRVA,DRVA3, I )
        V1A(I,mf,md)=DRVA3(1) *DSQRT(2.D0*RMMU(2)/HQC)
   15 CONTINUE
C* -- On shell --
       IF(Q0S.GT.0.D0) THEN
        CALL DRIVE2( L,IS,JJ,MF,MD,KOPPEL,DRVA,DRVA3, 2*NP+2 )
          V1A(NK+2,mf,md)=DRVA3(1) *DSQRT(2.D0*RMMU(2)/HQC)
       ENDIF
   14 continue
C* ----------------------------------------------
C*
      CALL KMAT1(jj)
      ISOP=2
C*
       do 17 md=-1,1
       do 17 mf=-jj,jj
C* --- Off Shell ----
c*       DO 16 J2=1,NP
c*         THS(J2   ,ISOP,mf,md)=T1(J2   ,mf,md)/DSQRT(2.D0*RMMU(1)/HQC)
c*         THS(J2+NP,ISOP,mf,md)=T1(J2+NP,mf,md)/DSQRT(2.D0*RMMU(2)/HQC)
c*   16  CONTINUE
C* --- On Shell ----
         THS(1,ISOP,mf,md)=T1(NK+1,mf,md)/DSQRT(2.D0*RMMU(1)/HQC)
         THS(2,ISOP,mf,md)=T1(NK+2,mf,md)/DSQRT(2.D0*RMMU(2)/HQC)
   17 continue
C*
      GO TO 1000
C
  500 CONTINUE
c*
       DO 30 I=1,NP
         P=PMOM(I)
       DO 30 J=1,I
         PS=PMOM(J)
         CALL POTLSJ3(P,PS,L,IS,JJ,V00,V02,V20,V22,KOPPEL)
         K=NP
            V2(I+K,J+K) =V00(2,2)/P/PS
                V2(J+K,I+K)=V2(I+K,J+K)
         JA=2*NP+J
            V2(I+K,JA+K)=V02(2,2)/P/PS
                V2(JA+K,I+K)=V2(I+K,JA+K)
         IA=2*NP+I
            V2(IA+K,J+K)=V20(2,2)/P/PS
                V2(J+K,IA+K)=V2(IA+K,J+K)
c*
            V2(IA+K,JA+K)=V22(2,2)/P/PS
                V2(JA+K,IA+K)=V2(IA+K,JA+K)
   30 CONTINUE
C
      IF(Q0S.GT.0.D0) THEN
       DO 32 I=1,NP
          P=PMOM(I)
          CALL POTLSJ3(P,Q0,L,IS,JJ,V00,V02,V20,V22,KOPPEL)
             K=NP
             IA=2*NP+I
               V2(I +K,NKK+2)=V00(2,2)/P/Q0
               V2(IA+K,NKK+2)=V20(2,2)/P/Q0
                  V2(NKK+2,I +K)=V2(I +K,NKK+2)
                  V2(NKK+2,IA+K)=V2(IA+K,NKK+2)
               V2(I +K,NKK+4)=V02(2,2)/P/Q0
               V2(IA+K,NKK+4)=V22(2,2)/P/Q0
                  V2(NKK+4,I +K)=V2(I +K,NKK+4)
   32             V2(NKK+4,IA+K)=V2(IA+K,NKK+4)
            ENDIF
      IF(Q0S.GT.0.D0) THEN
         CALL POTLSJ3(Q0,Q0,L,IS,JJ,V00,V02,V20,V22,KOPPEL)
               V2(NKK+2,NKK+2)=V00(2,2)/Q0/Q0
               V2(NKK+2,NKK+4)=V02(2,2)/Q0/Q0
               V2(NKK+4,NKK+2)=V20(2,2)/Q0/Q0
               V2(NKK+4,NKK+4)=V22(2,2)/Q0/Q0
      ENDIF
c*
       DO 33 I=1,NP
          P=PMOM(I)
          IA=2*NP+I
          AS(I   )=A(I)*P*P/(P*P-P0S)
          AS(I +K)=A(I)*P*P/(P*P-Q0S)
          AS(IA  )=AS(I)
   33     AS(IA+K)=AS(I+K)
C*
            AS(NKK+1)=SBTL
            AS(NKK+2)=SBTS
            AS(NKK+3)=SBTL
            AS(NKK+4)=SBTS
C* --- Driving term V2A(NKK4,2) -----------------
       do 37  md=-1,1
       do 37  mf=-jj,jj
C* -- Off shell --
       DO 35 I=NP+1,2*NP
          CALL DRIVE2( L,IS,JJ,MF,MD,KOPPEL,DRVA,DRVA3, I )
         V2A(I   ,mf,md) =DRVA3(1) *DSQRT(2.D0*RMMU(2)/HQC)
         V2A(I+NK,mf,md) =DRVA3(2) *DSQRT(2.D0*RMMU(2)/HQC)
   35  CONTINUE
C* -- On shell --
       IF(Q0S.GT.0.D0) THEN
        CALL DRIVE2( L,IS,JJ,MF,MD,KOPPEL,DRVA,DRVA3, 2*NP+2 )
         V2A(NKK+2,mf,md) =DRVA3(1) *DSQRT(2.D0*RMMU(2)/HQC)
         V2A(NKK+4,mf,md) =DRVA3(2) *DSQRT(2.D0*RMMU(2)/HQC)
       ENDIF
   37 continue
c*
C* ----------------------------------------------
C*
      CALL KMAT2(jj)
      ISOP=2
      do 38 md=-1,1
      do 38 mf=-jj,jj
C* -- Off Shell -----
c*       DO 36 J2=1,NP
c*       THSC(J2    ,ISOP,mf,md)=T2(J2    ,mf,md)/DSQRT(2.D0*RMMU(1)/HQC)
c*       THSC(J2+NP ,ISOP,mf,md)=T2(J2+NP ,mf,md)/DSQRT(2.D0*RMMU(2)/HQC)
c*       THSC(J2+NK ,ISOP,mf,md)=T2(J2+NK ,mf,md)/DSQRT(2.D0*RMMU(1)/HQC)
c*       THSC(J2+NK3,ISOP,mf,md)=T2(J2+NK3,mf,md)/DSQRT(2.D0*RMMU(2)/HQC)
c*   36  CONTINUE
C* -- On Shell -----
       THSC(1,ISOP,mf,md)=T2(NKK+1,mf,md)/DSQRT(2.D0*RMMU(1)/HQC)
       THSC(2,ISOP,mf,md)=T2(NKK+2,mf,md)/DSQRT(2.D0*RMMU(2)/HQC)
       THSC(3,ISOP,mf,md)=T2(NKK+3,mf,md)/DSQRT(2.D0*RMMU(1)/HQC)
       THSC(4,ISOP,mf,md)=T2(NKK+4,mf,md)/DSQRT(2.D0*RMMU(2)/HQC)
   38 continue
C*
 1000    CONTINUE
      RETURN
      END
C
C
C
C     ---1---------2---------3---------4---------5---------6---------7--
C *******************************************************************
         SUBROUTINE TMTRX1(L,IS,JJ, KOPPEL ,RMMU ,P0S,Q0S)
C *******************************************************************
C
      IMPLICIT REAL*8(A-H,O-Z)
      PARAMETER(NP=35,NK=2*NP,NK3=3*NP,NKK=4*NP
     .         ,NK2=NK+2,NKK4=NKK+4)
      PARAMETER(NP2=NP+2)
c**
      parameter(JMAXX=1)
      LOGICAL    KOPPEL
      COMPLEX*16    SBTL,SBTS
      complex*16    V1A,V2A,AS
      COMPLEX*16    T1,T2
      complex*16    DRVA(2,2),DRVA3(2)
      COMPLEX*16    ZL,ZS
      COMPLEX*16    THS,THSC
c*
      DIMENSION     V00(2,2),V02(2,2),V20(2,2),V22(2,2)
      DIMENSION     RMMU(2)
      common /corr/ THS (2,2,-JMAXX:JMAXX,-1:1)
     &             ,THSC(4,2,-JMAXX:JMAXX,-1:1)
      COMMON/VKV/V1(NK2,NK2),V2(NKK4,NKK4)
     &            ,V1A(NK2 ,-JMAXX:JMAXX,-1:1)
     &            ,V2A(NKK4,-JMAXX:JMAXX,-1:1),AS(NKK4)
      COMMON/TKT/T1(NK2 ,-JMAXX:JMAXX,-1:1)
     &          ,T2(NKK4,-JMAXX:JMAXX,-1:1)
      COMMON/GAUSSK/PMOM(NP2),A(NP2)
      COMMON/SUBT/PBAR
      COMMON/HQCP/HQC,PI
c*
      PIHALF=PI/2.D0
        P0=0.D0
        SBTL=0.D0
      IF(P0S.GT.0.) THEN
        P0=DSQRT(P0S)
          ZL=DCMPLX(0.D0,PIHALF*P0)
        DO 1 I=1,NP
        PX=PMOM(I)
    1   SBTL=SBTL-P0S/(PX*PX-P0S)*A(I)
        SBTL=SBTL-DLOG((PBAR+P0)/(PBAR-P0))*P0/2.D0 +ZL
      ENDIF
        Q0=0.D0
        SBTS=0.D0
      IF(Q0S.GT.0.D0) THEN
        Q0=DSQRT(Q0S)
          ZS=DCMPLX(0.D0,PIHALF*Q0)
        DO 2 I=1,NP
        PX=PMOM(I)
    2   SBTS=SBTS-Q0S/(PX*PX-Q0S)*A(I)
        SBTS=SBTS-DLOG((PBAR+Q0)/(PBAR-Q0))*Q0/2.D0+ZS
      ENDIF
      DO 3 I=1,NK2*NK2
    3    V1(I,1)=0.D0
      DO 4 I=1,NKK4*NKK4
    4    V2(I,1)=0.D0
      do 5 md=-1,1
      do 5 mf=-JMAXX,JMAXX
      DO 5 I1=1,NK2
    5    V1A(I1,mf,md)=0.D0
      do 6 md=-1,1
      do 6 mf=-JMAXX,JMAXX
      DO 6 I1=1,NKK4
    6    V2A(I1,mf,md)=0.D0
CC
      IF(KOPPEL) GOTO 500
c*
       DO 10 I=1,NP
           P=PMOM(I)
       DO 10 J=1,I
           PS=PMOM(J)
           CALL  POTLSJ(P,PS,L,IS,JJ,V00,V02,V20,V22,KOPPEL)
           JA=NP+J
           IA=NP+I
              V1(I ,J )=V00(1,1)/P/PS
              V1(I ,JA)=V00(1,2)/P/PS
              V1(IA,J )=V00(2,1)/P/PS
              V1(IA,JA)=V00(2,2)/P/PS
                 V1(J ,I )=V1(I ,J )
                 V1(JA,I )=V1(I ,JA)
                 V1(J ,IA)=V1(IA,J )
   10            V1(JA,IA)=V1(IA,JA)
       IF(P0S.GT.0.D0) THEN
       DO 11 I=1,NP
           P=PMOM(I)
           CALL  POTLSJ(P,P0,L,IS,JJ,V00,V02,V20,V22,KOPPEL)
           IA=NP+I
              V1(I ,NK+1)=V00(1,1)/P/P0
              V1(IA,NK+1)=V00(2,1)/P/P0
                 V1(NK+1,I )=V1(I ,NK+1)
   11            V1(NK+1,IA)=V1(IA,NK+1)
       ENDIF
       IF(Q0S.GT.0.D0) THEN
       DO 12 I=1,NP
           P=PMOM(I)
           CALL  POTLSJ(P,Q0,L,IS,JJ,V00,V02,V20,V22,KOPPEL)
           IA=NP+I
              V1(I ,NK+2)=V00(1,2)/P/Q0
              V1(IA,NK+2)=V00(2,2)/P/Q0
                   V1(NK+2,I )=V1(I ,NK+2)
   12              V1(NK+2,IA)=V1(IA,NK+2)
       ENDIF
c*
       IF(P0S.GT.0.D0) THEN
           CALL  POTLSJ(P0,P0,L,IS,JJ,V00,V02,V20,V22,KOPPEL)
             V1(NK+1,NK+1)=V00(1,1)/P0/P0
       ENDIF
       IF(Q0S.GT.0.D0) THEN
           CALL  POTLSJ(P0,Q0,L,IS,JJ,V00,V02,V20,V22,KOPPEL)
             V1(NK+1,NK+2)=V00(1,2)/P0/Q0
             V1(NK+2,NK+1)=V1(NK+1,NK+2)
           CALL  POTLSJ(Q0,Q0,L,IS,JJ,V00,V02,V20,V22,KOPPEL)
             V1(NK+2,NK+2)=V00(2,2)/Q0/Q0
       ENDIF
c*
       DO 13 I=1,NP
           P=PMOM(I)
           IA=NP+I
           AS(I )=A(I)*P*P/(P*P-P0S)
   13      AS(IA)=A(I)*P*P/(P*P-Q0S)
C*
           AS(NK+1)=SBTL
           AS(NK+2)=SBTS
C*
C* --- Driving term V1A(NK2) ------------------
      do 14 md=-1,1
      do 14 mf=-jj,jj
C* -- Off shell --
      DO 15 I=1,2*NP
        CALL DRIVE2( L,IS,JJ,MF,MD,KOPPEL,DRVA,DRVA3, I )
       IF(I.LE.NP) THEN
       JCHAN=1
       ELSEIF(NP+1.LE.I) THEN
       JCHAN=2
       ENDIF
        V1A(I,mf,md)=DRVA(1,JCHAN)*DSQRT(2.D0*RMMU(JCHAN)/HQC)
   15 CONTINUE
C* -- On shell --
       IF(P0S.GT.0.D0) THEN
        CALL DRIVE2( L,IS,JJ,MF,MD,KOPPEL,DRVA,DRVA3, 2*NP+1 )
          V1A(NK+1,mf,md)=DRVA(1,1)*DSQRT(2.D0*RMMU(1)/HQC)
       ENDIF
C*
       IF(Q0S.GT.0.D0) THEN
        CALL DRIVE2( L,IS,JJ,MF,MD,KOPPEL,DRVA,DRVA3, 2*NP+2 )
          V1A(NK+2,mf,md)=DRVA(1,2)*DSQRT(2.D0*RMMU(2)/HQC)
       ENDIF
   14 continue
C*
C* ----------------------------------------------
C*
      CALL KMAT1(jj)
      ISOP=1
C*
       do 17 md=-1,1
       do 17 mf=-jj,jj
C* --- Off Shell ----
c*       DO 16 J2=1,NP
c*         THS(J2   ,ISOP,mf,md)=T1(J2   ,mf,md)/DSQRT(2.D0*RMMU(1)/HQC)
c*         THS(J2+NP,ISOP,mf,md)=T1(J2+NP,mf,md)/DSQRT(2.D0*RMMU(2)/HQC)
c*   16  CONTINUE
C* --- On Shell ----
         THS(1,ISOP,mf,md)=T1(NK+1,mf,md)/DSQRT(2.D0*RMMU(1)/HQC)
         THS(2,ISOP,mf,md)=T1(NK+2,mf,md)/DSQRT(2.D0*RMMU(2)/HQC)
   17 continue
C*
      GO TO 1000
C
  500 CONTINUE
c*
       DO 30 I=1,NP
         P=PMOM(I)
       DO 30 J=1,I
         PS=PMOM(J)
         CALL  POTLSJ(P,PS,L,IS,JJ,V00,V02,V20,V22,KOPPEL)
         K=NP
            V2(I  ,J  ) =V00(1,1)/P/PS
            V2(I  ,J+K) =V00(1,2)/P/PS
            V2(I+K,J  ) =V00(2,1)/P/PS
            V2(I+K,J+K) =V00(2,2)/P/PS
                V2(J  ,I  )=V2(I  ,J  )
                V2(J+K,I  )=V2(I  ,J+K)
                V2(J  ,I+K)=V2(I+K,J  )
                V2(J+K,I+K)=V2(I+K,J+K)
         JA=2*NP+J
            V2(I  ,JA  )=V02(1,1)/P/PS
            V2(I  ,JA+K)=V02(1,2)/P/PS
            V2(I+K,JA  )=V02(2,1)/P/PS
            V2(I+K,JA+K)=V02(2,2)/P/PS
                V2(JA  ,I  )=V2(I  ,JA  )
                V2(JA+K,I  )=V2(I  ,JA+K)
                V2(JA  ,I+K)=V2(I+K,JA  )
                V2(JA+K,I+K)=V2(I+K,JA+K)
         IA=2*NP+I
            V2(IA  ,J  )=V20(1,1)/P/PS
            V2(IA  ,J+K)=V20(1,2)/P/PS
            V2(IA+K,J  )=V20(2,1)/P/PS
            V2(IA+K,J+K)=V20(2,2)/P/PS
                V2(J  ,IA  )=V2(IA  ,J  )
                V2(J+K,IA  )=V2(IA  ,J+K)
                V2(J  ,IA+K)=V2(IA+K,J  )
                V2(J+K,IA+K)=V2(IA+K,J+K)
c*
            V2(IA  ,JA  )=V22(1,1)/P/PS
            V2(IA  ,JA+K)=V22(1,2)/P/PS
            V2(IA+K,JA  )=V22(2,1)/P/PS
            V2(IA+K,JA+K)=V22(2,2)/P/PS
                V2(JA  ,IA  )=V2(IA  ,JA  )
                V2(JA+K,IA  )=V2(IA  ,JA+K)
                V2(JA  ,IA+K)=V2(IA+K,JA  )
                V2(JA+K,IA+K)=V2(IA+K,JA+K)
   30 CONTINUE
C
      IF(P0S.GT.0.D0) THEN
       DO 31 I=1,NP
          P=PMOM(I)
          CALL  POTLSJ(P,P0,L,IS,JJ,V00,V02,V20,V22,KOPPEL)
             K=NP
             IA=2*NP+I
               V2(I   ,NKK+1)=V00(1,1)/P/P0
               V2(I +K,NKK+1)=V00(2,1)/P/P0
               V2(IA  ,NKK+1)=V20(1,1)/P/P0
               V2(IA+K,NKK+1)=V20(2,1)/P/P0
                  V2(NKK+1,I   )=V2(I   ,NKK+1)
                  V2(NKK+1,I +K)=V2(I +K,NKK+1)
                  V2(NKK+1,IA  )=V2(IA  ,NKK+1)
                  V2(NKK+1,IA+K)=V2(IA+K,NKK+1)
               V2(I   ,NKK+3)=V02(1,1)/P/P0
               V2(I +K,NKK+3)=V02(2,1)/P/P0
               V2(IA  ,NKK+3)=V22(1,1)/P/P0
               V2(IA+K,NKK+3)=V22(2,1)/P/P0
                  V2(NKK+3,I   )=V2(I   ,NKK+3)
                  V2(NKK+3,I +K)=V2(I +K,NKK+3)
                  V2(NKK+3,IA  )=V2(IA  ,NKK+3)
   31             V2(NKK+3,IA+K)=V2(IA+K,NKK+3)
      ENDIF
      IF(Q0S.GT.0.D0) THEN
       DO 32 I=1,NP
          P=PMOM(I)
          CALL  POTLSJ(P,Q0,L,IS,JJ,V00,V02,V20,V22,KOPPEL)
             K=NP
             IA=2*NP+I
               V2(I   ,NKK+2)=V00(1,2)/P/Q0
               V2(I +K,NKK+2)=V00(2,2)/P/Q0
               V2(IA  ,NKK+2)=V20(1,2)/P/Q0
               V2(IA+K,NKK+2)=V20(2,2)/P/Q0
                  V2(NKK+2,I   )=V2(I   ,NKK+2)
                  V2(NKK+2,I +K)=V2(I +K,NKK+2)
                  V2(NKK+2,IA  )=V2(IA  ,NKK+2)
                  V2(NKK+2,IA+K)=V2(IA+K,NKK+2)
               V2(I   ,NKK+4)=V02(1,2)/P/Q0
               V2(I +K,NKK+4)=V02(2,2)/P/Q0
               V2(IA  ,NKK+4)=V22(1,2)/P/Q0
               V2(IA+K,NKK+4)=V22(2,2)/P/Q0
                  V2(NKK+4,I   )=V2(I   ,NKK+4)
                  V2(NKK+4,I +K)=V2(I +K,NKK+4)
                  V2(NKK+4,IA  )=V2(IA  ,NKK+4)
   32             V2(NKK+4,IA+K)=V2(IA+K,NKK+4)
            ENDIF
c*
      IF(P0S.GT.0.D0) THEN
         CALL  POTLSJ(P0,P0,L,IS,JJ,V00,V02,V20,V22,KOPPEL)
               V2(NKK+1,NKK+1)=V00(1,1)/P0/P0
               V2(NKK+1,NKK+3)=V02(1,1)/P0/P0
               V2(NKK+3,NKK+1)=V20(1,1)/P0/P0
               V2(NKK+3,NKK+3)=V22(1,1)/P0/P0
      ENDIF
      IF(Q0S.GT.0.D0) THEN
         CALL  POTLSJ(P0,Q0,L,IS,JJ,V00,V02,V20,V22,KOPPEL)
               V2(NKK+1,NKK+2)=V00(1,2)/P0/Q0
               V2(NKK+1,NKK+4)=V02(1,2)/P0/Q0
               V2(NKK+3,NKK+2)=V20(1,2)/P0/Q0
               V2(NKK+3,NKK+4)=V22(1,2)/P0/Q0
                    V2(NKK+2,NKK+1)=V2(NKK+1,NKK+2)
                    V2(NKK+4,NKK+1)=V2(NKK+1,NKK+4)
                    V2(NKK+2,NKK+3)=V2(NKK+3,NKK+2)
                    V2(NKK+4,NKK+3)=V2(NKK+3,NKK+4)
         CALL  POTLSJ(Q0,Q0,L,IS,JJ,V00,V02,V20,V22,KOPPEL)
               V2(NKK+2,NKK+2)=V00(2,2)/Q0/Q0
               V2(NKK+2,NKK+4)=V02(2,2)/Q0/Q0
               V2(NKK+4,NKK+2)=V20(2,2)/Q0/Q0
               V2(NKK+4,NKK+4)=V22(2,2)/Q0/Q0
      ENDIF
c*
       DO 33 I=1,NP
          P=PMOM(I)
          IA=2*NP+I
          AS(I   )=A(I)*P*P/(P*P-P0S)
          AS(I +K)=A(I)*P*P/(P*P-Q0S)
          AS(IA  )=AS(I)
   33     AS(IA+K)=AS(I+K)
C*
            AS(NKK+1)=SBTL
            AS(NKK+2)=SBTS
            AS(NKK+3)=SBTL
            AS(NKK+4)=SBTS
C* --- Driving term V2A(NKK4,2) -----------------
       do 37  md=-1,1
       do 37  mf=-jj,jj
C* -- Off shell --
       DO 35 I=1,2*NP
        CALL DRIVE2( L,IS,JJ,MF,MD,KOPPEL,DRVA,DRVA3, I )
         IF(I.LE.NP) THEN
         JCHAN=1
         ELSEIF(NP+1.LE.I) THEN
         JCHAN=2
         ENDIF
         V2A(I   ,mf,md) =DRVA(1,JCHAN)*DSQRT(2.D0*RMMU(JCHAN)/HQC)
         V2A(I+NK,mf,md) =DRVA(2,JCHAN)*DSQRT(2.D0*RMMU(JCHAN)/HQC)
   35  CONTINUE
C* -- On shell --
       IF(P0S.GT.0.D0) THEN
        CALL DRIVE2( L,IS,JJ,MF,MD,KOPPEL,DRVA,DRVA3, 2*NP+1 )
         V2A(NKK+1,mf,md) =DRVA(1,1)*DSQRT(2.D0*RMMU(1)/HQC)
         V2A(NKK+3,mf,md) =DRVA(2,1)*DSQRT(2.D0*RMMU(1)/HQC)
       ENDIF
C*
       IF(Q0S.GT.0.D0) THEN
        CALL DRIVE2( L,IS,JJ,MF,MD,KOPPEL,DRVA,DRVA3, 2*NP+2 )
         V2A(NKK+2,mf,md) =DRVA(1,2)*DSQRT(2.D0*RMMU(2)/HQC)
         V2A(NKK+4,mf,md) =DRVA(2,2)*DSQRT(2.D0*RMMU(2)/HQC)
       ENDIF
   37 continue
C*
C* ----------------------------------------------
C*
      CALL KMAT2(jj)
      ISOP=1
      do 38 md=-1,1
      do 38 mf=-jj,jj
C* -- Off Shell -----
c*       DO 36 J2=1,NP
c*       THSC(J2    ,ISOP,mf,md)=T2(J2    ,mf,md)/DSQRT(2.D0*RMMU(1)/HQC)
c*       THSC(J2+NP ,ISOP,mf,md)=T2(J2+NP ,mf,md)/DSQRT(2.D0*RMMU(2)/HQC)
c*       THSC(J2+NK ,ISOP,mf,md)=T2(J2+NK ,mf,md)/DSQRT(2.D0*RMMU(1)/HQC)
c*       THSC(J2+NK3,ISOP,mf,md)=T2(J2+NK3,mf,md)/DSQRT(2.D0*RMMU(2)/HQC)
c*   36  CONTINUE
C* -- On Shell -----
       THSC(1,ISOP,mf,md)=T2(NKK+1,mf,md)/DSQRT(2.D0*RMMU(1)/HQC)
       THSC(2,ISOP,mf,md)=T2(NKK+2,mf,md)/DSQRT(2.D0*RMMU(2)/HQC)
       THSC(3,ISOP,mf,md)=T2(NKK+3,mf,md)/DSQRT(2.D0*RMMU(1)/HQC)
       THSC(4,ISOP,mf,md)=T2(NKK+4,mf,md)/DSQRT(2.D0*RMMU(2)/HQC)
   38 continue
C*
 1000    CONTINUE
      RETURN
      END
C
C
C     ---1---------2---------3---------4---------5---------6---------7--
C
C *******************************************************************
      SUBROUTINE KMAT1(jj)
C *******************************************************************
C
      PARAMETER(NP=35,NPP2=4*NP+4,NP1=2*NP+2)
      PARAMETER(NN=NP1,NN2=2*NN)
      PARAMETER(NP4=4*NP)
c**
      parameter(JMAXX=1)
      IMPLICIT REAL*8(A-H,O-Z)
      COMPLEX*16   T1,T2
      COMPLEX*16   H1(NN,NN),DT,ALDT
      COMPLEX*16   V1A,V2A,AS
      DIMENSION EPSXX(NN),IW(NN2)
      COMMON/VKV/V1(NP1,NP1),V2(NPP2,NPP2)
     &            ,V1A(NP1 ,-JMAXX:JMAXX,-1:1)
     &            ,V2A(NPP2,-JMAXX:JMAXX,-1:1),AS(NPP2)
      COMMON/TKT/T1(NP1 ,-JMAXX:JMAXX,-1:1)
     &          ,T2(NPP2,-JMAXX:JMAXX,-1:1)
C**
       DO 1 I=1,NP1
       DO 1 J=1,NP1
    1    H1(I,J)= V1(I,J)*AS(J)
C*
      DO 2 I=1,NP1
    2    H1(I,I)=H1(I,I)+1.D0
      NMAX=NN
      CALL  TINVCC(NMAX,H1,DT,ALDT,1.D-10,NN,IW,INDER,EPSXX)
C
C      WRITE(6,99) NMAX,DT,ALDT,INDER,(EPSXX(K),K=1,NP,10)
C   99 FORMAT(/5X,'<<<<  MATRIX INVERSION  >>>>',
C     &       /9X,'NMAX =',I5,2X,'DT =',2E11.4,2X
C     &          ,'ALDT =',2E11.4 /9X,'INDER=',I5
C     &       /(5X,10(2X,E9.2)))
C  700   CONTINUE
      do 5 md=-1,1
      do 5 mf=-jj,jj
      DO 3 I=1,NP1
         T1(I,mf,md)=0.D0
      DO 3 K=1,NP1
        T1(I,mf,md)=H1(I,K)*V1A(K,mf,md)+T1(I,mf,md)
    3 CONTINUE
c*
       DO 4 I=1,NP1
         T1(I,mf,md)=T1(i,mf,md)-V1A(i,mf,md)
    4 CONTINUE
    5 continue
      RETURN
      END
C     ---1---------2---------3---------4---------5---------6---------7--
C *******************************************************************
      SUBROUTINE KMAT2(jj)
C *******************************************************************
C
      PARAMETER(NP=35,NPP2=4*NP+4,NP1=2*NP+2)
      PARAMETER(NN=NPP2,NN2=NN*2)
      PARAMETER(NP4=4*NP)
**
      parameter(JMAXX=1)
      IMPLICIT REAL*8(A-H,O-Z)
      COMPLEX*16   T1,T2
      COMPLEX*16   H2(NN,NN),DT,ALDT
      COMPLEX*16   V1A,V2A,AS
      DIMENSION EPSXX(NN),IW(NN2)
      COMMON/VKV/V1(NP1,NP1),V2(NPP2,NPP2)
     &            ,V1A(NP1 ,-JMAXX:JMAXX,-1:1)
     &            ,V2A(NPP2,-JMAXX:JMAXX,-1:1),AS(NPP2)
      COMMON/TKT/T1(NP1 ,-JMAXX:JMAXX,-1:1)
     &          ,T2(NPP2,-JMAXX:JMAXX,-1:1)
*
C*
       DO 1 I=1,NPP2
       DO 1 J=1,NPP2
    1    H2(I,J)= V2(I,J)*AS(J)
C*
      DO 2 I=1,NPP2
    2    H2(I,I)=H2(I,I)+1.D0
      NMAX=NN
      CALL  TINVCC(NMAX,H2,DT,ALDT,1.D-10,NN,IW,INDER,EPSXX)
      TTT=FLOAT(INDER)
C
C      WRITE(6,99) NMAX,DT,ALDT,INDER,(EPSXX(K),K=1,NP,10)
C   99 FORMAT(/5X,'<<<<  MATRIX INVERSION  >>>>',
C     &       /9X,'NMAX =',I5,2X,'DT =',2E11.4,2X
C     &          ,'ALDT =',2E11.4 /9X,'INDER=',I5
C     &       /(5X,10(2X,E9.2)))
      do 5 md=-1,1
      do 5 mf=-jj,jj
      DO 3 I=1,NPP2
         T2(I,mf,md)=0.D0
      DO 3  K=1,NPP2
    3    T2(I,mf,md)=H2(I,K)*V2A(K,mf,md)+T2(I,mf,md)
*
      DO 4 I=1,NPP2
         T2(I,mf,md)=T2(i,mf,md)-V2A(i,mf,md)
    4 continue
    5 continue
      RETURN
      END
C
C
C     ---1---------2---------3---------4---------5---------6---------7--
C* *****************************************
      SUBROUTINE HELFER
C*  Calculation of I!  SQRT(I!)
C*
      IMPLICIT REAL*8 (A-H,O-Z)
      PARAMETER ( LHIFA=30)
      COMMON/FACUL/ F(LHIFA),SF(LHIFA)
      COMMON/HILF/  D(LHIFA),SD(LHIFA)
      F(1)=1.D0
      F(2)=1.D0
      DO 1 I=3,LHIFA
    1 F(I)=F(I-1)*DFLOAT(I-1)
      DO 2 I=1,LHIFA
    2 SF(I)=DSQRT(F(I))
      DO 3 I=1,LHIFA
      D(I)=2.d0*DFLOAT(I-1)+1.d0
    3 SD(I)=DSQRT(D(I))
      RETURN
      END
C
C
C     ---1---------2---------3---------4---------5---------6---------7--
C
      SUBROUTINE SPLFAK(X,N)
      IMPLICIT REAL*8(A-H,O-Z)
      PARAMETER ( NSPL=100 )
C     DIE 2.ABLEITUNGEN AN DEN RAENDERN MUESSEN = 0 SEIN !
C     MIT DEN N STUETZSTELLEN X WIRD DER SPLINE AUFGEBAUT
      DIMENSION X(N)
      DIMENSION HI(NSPL),U(NSPL)
      COMMON /FAKTOR/ FAK1(NSPL,NSPL),FAK2(NSPL,NSPL),FAK3(NSPL,NSPL),
     C              Q(NSPL,NSPL),C(NSPL,NSPL)
      IF (N.LE.0) STOP' SPLFAK: N.LE.0'
      U(1)=0.D0
      HI(2)=X(2)-X(1)
      N1=N-1
      DO 10 I=2,N1
      AX=X(I+1)-X(I)
      HI(I+1)=AX
      BX=X(I+1)-X(I-1)
      CX=X(I)-X(I-1)
      AL=AX/BX
      AM=1.D0-AL
      PI=1.D0/(2.D0 -AM*U(I-1))
      U(I)=AL*PI
      DO 20 J=1,N
      Q(1,J)=0.D0
      H1=0.D0
      H2=0.D0
      H3=0.D0
      IF(J.EQ.I-1) H1=1.D0 /(CX*BX)
      IF(J.EQ.I) H2=1.D0 /(CX*AX)
      IF(J.EQ.I+1) H3=1.D0 /(AX*BX)
      Q(I,J)=-PI*(AM*Q(I-1,J)-H1+H2-H3)
  20  CONTINUE
  10  CONTINUE
      N2=N+1
      N3=N+2
      DO 30 K=3,N2
      J1=N3-K
      H1=1.D0 /HI(J1+1)
      DO 40 L=1,N
      C(N,L)=0.D0
      C(J1,L)=Q(J1,L)-C(J1+1,L)*U(J1)
      FAK1(J1,L)=-HI(J1+1)*(2.*C(J1,L)+C(J1+1,L))
      IF(L.EQ.J1) FAK1(J1,L)=FAK1(J1,L)-H1
      IF(L.EQ.J1+1) FAK1(J1,L)=FAK1(J1,L)+H1
      FAK2(J1,L)=3.*C(J1,L)
      FAK3(J1,L)=(C(J1+1,L)-C(J1,L))*H1
      FAK1(N,L)=0.D0
      FAK2(N,L)=0.D0
      FAK3(N,L)=0.D0
  40  CONTINUE
  30  CONTINUE
      RETURN
      END
C*
C     ---1---------2---------3---------4---------5---------6---------7--
      SUBROUTINE SPLMOD(X,N,XA,SPL)
      IMPLICIT REAL*8(A-H,O-Z)
      PARAMETER (NSPL=100)
C     MITTELS N STUETZSTELLEN X WERDEN DIE FUNKTIONSWERTE SPL
C     AN BELIEBIGEN STELLEN XA INTERPOLIERT
C     IM HP MUSS ZUR ENDGUELTIGEN RECHNUNG NOCH
C     SUMME UEBER J SPL(J)*Y(J) GEBILDET WERDEN
      DIMENSION X(N)
      DIMENSION SPL(N)
      COMMON /FAKTOR/ FAK1(NSPL,NSPL),FAK2(NSPL,NSPL),FAK3(NSPL,NSPL),
     C              QDUM(NSPL,NSPL),CDUM(NSPL,NSPL)
      IF (N.LE.0) STOP' SPLMOD: N.LE.0'
   1  I=0
   2  I=I+1
      IF(I.GT.N) GO TO 3
      IF(XA.GE.X(I)) GO TO 2
   3  I1=I-1
      IF(I1.EQ.0) I1=1
      DX=XA-X(I1)
      DO 10 J=1,N
      SPL(J)=((FAK3(I1,J)*DX+FAK2(I1,J))*DX+FAK1(I1,J))*DX
      IF(J.EQ.I1) SPL(J)=SPL(J)+1.D0
  10  CONTINUE
      RETURN
      END
C*
C* -- cg2d.f --
      FUNCTION CGC(I,J,K,L,M,N)
C**********************************************************************
C
C  CLEBSCH-GORDON   < I/2 J/2 L/2 M/2 / K/2 N/2 >
C
C**********************************************************************
      IMPLICIT REAL*8(A-H,O-Z)
      PARAMETER (NFAK=30)
      INTEGER T
      COMMON /FKLT/ F(0:NFAK),WF(0:NFAK)
      IF (L+M .NE. N .OR. ABS(I-J) .GT. K .OR. K .GT. I+J .OR.
     .    ABS(L) .GT. I .OR. ABS(M) .GT. J .OR. ABS(N) .GT. K) THEN
       CGC=0.D0
       RETURN
      ENDIF
      I1=(I+L)/2
      I2=(I-L)/2
      I3=(J+M)/2
      I4=(J-M)/2
      I5=(K-N)/2
      I6=(K+N)/2
      I7=(I+J-K)/2
      I8=(J+K-I)/2
      I9=(K+I-J)/2
      I10=(I+J+K+2)/2
      XX=WF(I7)*WF(I8)*WF(I9)*WF(I1)*WF(I2)*WF(I3)*WF(I4)*WF(I5)*
     .   WF(I6)/WF(I10)
      J1=(K-J+L)/2
      J2=(K-I-M)/2
      NT=MIN(I1,I2,I3,I4,I5,I6,I7,I8,I9)+1
      IT=0
      SUM=0.D0
      T=-1
   10   T=T+1
        L1=J1+T
        L2=J2+T
        L3=I7-T
        L4=I2-T
        L5=I3-T
        IF (MIN(L1,L2,L3,L4,L5) .LT. 0) GOTO 10
       SUM=SUM+RM1H(T)/(F(T)*F(L1)*F(L2)*F(L3)*F(L4)*F(L5))
       IT=IT+1
       IF (IT .LT. NT) GOTO 10
      CGC=XX*SUM*DSQRT(K+1.D0)
      END
      FUNCTION CG000 (I,J,K)
C**********************************************************************
C
C  CLEBSCH-GORDON   < I J 0 0 / K 0 >
C
C  DREIECKSUNGLEICHUNG UND PHASE VON (I+J+K) WERDEN NICHT GETESTET.
C
C**********************************************************************
      IMPLICIT REAL*8 (A-H,O-Z)
      PARAMETER (NFAK=30)
      COMMON /FKLT/ F(0:NFAK),WF(0:NFAK)
      IP=(I+J+K)/2
      CG000=RM1H(IP+I-J)*WF(I+J-K)*WF(J+K-I)*WF(K+I-J)/WF(I+J+K+1)
     .      *F(IP)/(F(IP-I)*F(IP-J)*F(IP-K))*DSQRT(2.D0*K+1)
      END
      FUNCTION C6J2 (I,J,K,L,M)
C**********************************************************************
C
C  6-J-SYMBOL   ( I/2  J/2  1/2 )
C               ( K/2  L/2  M/2 )
C
C**********************************************************************
      IMPLICIT REAL*8 (A-H,O-Z)
      INTEGER G
      JK=MIN(I,J)
      JG=MIN(K,L)
      IF ((J-I)*(L-K) .GE. 0) THEN
       G=M-1
       F=(1+(G+JK-JG)/2)*(1+(G-JK+JG)/2)
      ELSE
       G=M
       F=(1+(JK+JG-G)/2)*(2+(JK+JG+G)/2)
      ENDIF
      IF (ABS(JK-JG) .LE. G .AND. G .LE. JK+JG) THEN
       C6J2=RM1H(1+(JK+JG+G)/2)*DSQRT(F/((JK+1)*(JK+2)*(JG+1)
     .        *(JG+2)))
      ELSE
       C6J2=0.D0
      ENDIF
      END
      FUNCTION C9J2 (I,J,K,L,M,N,O,P)
C**********************************************************************
C
C               ( I/2  J/2  K/2 )
C  9-J-SYMBOL   ( L/2  1/2  M/2 )
C               ( N/2  O/2  P/2 )
C
C**********************************************************************
      IMPLICIT REAL*8 (A-H,O-Z)
      INTEGER O,P,G,GMIN,GMAX
      C9J2=0.D0
      GMIN=MAX(ABS(L-P),ABS(K-1),ABS(O-I))
      GMAX=MIN(L+P,K+1,O+I)
      DO 10 G=GMIN,GMAX,2
   10  C9J2=C9J2+RM1H(G)*(G+1)*C6J2(L,M,K,G,P)*C6J2(K,G,O,J,I)
     .      *C6J(N,O,P,G,L,I)
      C9J2=RM1H((I+J+K+L+1+M+N+O+P)/2)*C9J2
      END
      FUNCTION C6J (I,J,K,L,M,N)
C**********************************************************************
C
C  6-J-SYMBOL   ( I/2  J/2  K/2 )
C               ( L/2  M/2  N/2 )
C
C**********************************************************************
      IMPLICIT REAL*8 (A-H,O-Z)
      INTEGER T,G
      LOGICAL FAC
      DIMENSION JF(2,3)
      COMMON /FAKLOG/ FL(0:100)
      SAVE /FAKLOG/
      DATA FAC /.FALSE./
      IF (.NOT. FAC) THEN
       FAC=.TRUE.
       FL(0)=0.D0
       DO 20 IF=1,100
   20   FL(IF)=LOG(REAL(IF))+FL(IF-1)
      ENDIF
      C6J=0.D0
      CALL DELMIN(I,J,K,IJK,MIJK,DIJK)
      CALL DELMIN(I,M,N,IMN,MIMN,DIMN)
      CALL DELMIN(L,J,N,LJN,MLJN,DLJN)
      CALL DELMIN(L,M,K,LMK,MLMK,DLMK)
      NT=MIN(MIJK,MIMN,MLJN,MLMK)
      IF (NT .LT. 0) RETURN
      IF (MIN(I,J,K,L,M,N) .EQ. 0) THEN
       JF(1,1)=I
       JF(1,2)=J
       JF(1,3)=K
       JF(2,1)=L
       JF(2,2)=M
       JF(2,3)=N
       DO 10 JJ=1,3
        DO 10 II=1,2
         IF (JF(II,JJ) .EQ. 0) THEN
          I0=II
          J0=JJ
         ENDIF
   10    CONTINUE
       G=JF(3-I0,J0)
       IF (J0 .EQ. 3) THEN
        K0=1
       ELSE
        K0=3
       ENDIF
       JK=JF(1,K0)
       JG=JF(2,K0)
       C6J=RM1H((JK+JG+G)/2)/DSQRT((JK+1.D0)*(JG+1.D0))
      ELSE
       NTMIN=MAX(IJK,IMN,LJN,LMK)
       W=0.5D0*(DIJK+DIMN+DLJN+DLMK)
       IJLM=(I+J+L+M)/2
       JKMN=(J+K+M+N)/2
       KINL=(K+I+N+L)/2
       DO 30 T=NTMIN,NTMIN+NT
        SL=W+FL(T+1)-FL(T-IJK)-FL(T-IMN)-FL(T-LJN)-FL(T-LMK)-FL(IJLM-T)
     .     -FL(JKMN-T)-FL(KINL-T)
        S=RM1H(T)*DEXP(SL)
   30   C6J=C6J+S
      ENDIF
      END
C*
C     ---1---------2---------3---------4---------5---------6---------7--
      SUBROUTINE DELMIN (J1,J2,J3,MX,MNPER,DELTA)
      IMPLICIT REAL*8 (A-H,O-Z)
      COMMON /FAKLOG/ FL(0:100)
      MX=J1+J2+J3
      IF (MOD(MX,2) .NE. 0) THEN
       MNPER=-1
      ELSE
       MX=MX/2
       I=(J1+J2-J3)/2
       J=(J2+J3-J1)/2
       K=(J3+J1-J2)/2
       MNPER=MIN(I,J,K)
       IF (MNPER .GE. 0) DELTA=FL(I)+FL(J)+FL(K)-FL(MX+1)
      ENDIF
      END
      FUNCTION RM1H (I)
C**********************************************************************
C
C  RM1H = (-1) ** I
C
C**********************************************************************
      IMPLICIT REAL*8 (A-H,O-Z)
      RM1H=1-2*MOD(I,2)
      END
C     ---1---------2---------3---------4---------5---------6---------7--
      SUBROUTINE FKLTT
C**********************************************************************
C
C  I!  SQRT(I!)   0 <= I <= NFAK
C
C**********************************************************************
      IMPLICIT REAL*8 (A-H,O-Z)
      PARAMETER (NFAK=30)
      COMMON /FKLT/ F(0:NFAK),WF(0:NFAK)
      SAVE /FKLT/
      F(0)=1.D0
      DO 10 I=1,NFAK
   10  F(I)=I*F(I-1)
      DO 20 I=0,NFAK
   20  WF(I)=DSQRT(F(I))
      END
C***********************************************************
C     ---1---------2---------3---------4---------5---------6---------7--
      SUBROUTINE    TINVCC(N,A,DT,ALDT,E,NN,IW,INDER,EPSXX)
C***********************************************************
*KM
*    MAKE IT DOUBLE. 11/8/1996
*
C  ********** LIBRARY HEADER ********************
C00  F1/CTU0023F/TINVCC;COMPUTER CENTER TOHOKU UNIVERSITY
C10  TINVCC;MATRIX INVERSION,SWEEP OUT    (COMPLEX)
C20  SUBROUTINE
C30  710430;SAKATA MASATO
C40
C50
C60  ACOS SERIES 77 NEAC SYSTEM 700;ACOS-6,R3.1
C61  ACOS 77 NEAC S800; ACOS-6 R4.1-1; FORTRAN R004 (HEX,BIN)
C70  LP=6
C80  CM=708W
C90
C  **********************************************
C     INVERSION OF COMPLEX MATRIX A(NXN)
C     SWEEP OUT, COMPLETE POSITIONING
      IMPLICIT REAL*8(A-H,O-Z)
      COMPLEX*16      A,AA,AZ,WORK,PIV,DT,ALDT
      DIMENSION     A(NN,N)  ,IW(1)
     &             ,EPSXX(N)
      INDER=0
      IF(N-1)    910,930,101
  101 IF(N.GT.NN)    GO TO  900
      EPS=0.D0
      DT=DCMPLX(1.D0,0.D0)
      ALDT=0.D0
      DO  100     K=1,N
      PIV=DCMPLX(0.D0,0.D0)
      DO  110       I=K,N
      DO  110       J=K,N
      IF(CDABS(A(I,J)).LE.CDABS(PIV))   GO TO  110
      IPIV=I
      JPIV=J
      PIV=A(I,J)
  110 CONTINUE
      ALDT=ALDT+CDLOG(PIV)
      IF(CDABS(PIV).LE.EPS)   GO TO  920
      IF(K.EQ.1)   EPS=CDABS(PIV)*E
      IF(K.EQ.1)   EPSX=CDABS(PIV)
      EPSXX(K)=CDABS(PIV)/EPSX
      IF(IPIV.EQ.K)      GO TO 130
      ALDT=1.D0/ALDT
      DO 120   J=1,N
      WORK=A(IPIV,J)
      A(IPIV,J)=A(K,J)
  120 A(K,J)=WORK
  130 IF(JPIV.EQ.K)      GO TO  150
      ALDT=1.D0/ALDT
      DO 140   I=1,N
      WORK=A(I,JPIV)
      A(I,JPIV)=A(I,K)
  140 A(I,K)=WORK
  150 IW(2*K-1)=IPIV
      IW(2*K)=JPIV
      AA=DCMPLX(1.D0,0.D0)/PIV
      DO 210   J=1,N
  210 A(K,J)=A(K,J)*AA
      DO 220  I=1,N
      IF(I.EQ.K)    GO TO  220
      AZ=A(I,K)
      IF(AZ.EQ.DCMPLX(0.D0,0.D0))   GO TO  220
      DO 230   J=1,N
  230 A(I,J)=A(I,J)-A(K,J)*AZ
      A(I,K)=-AA*AZ
  220 CONTINUE
  100 A(K,K)=AA
      DO  400 KK=2,N
      K=N+1-KK
      IJ=IW(2*K)
      IF(IJ.EQ.K)   GO TO  420
      DO 410   J=1,N
      WORK=A(IJ,J)
      A(IJ,J)=A(K,J)
  410 A(K,J)=WORK
  420 IJ=IW(2*K-1)
      IF(IJ.EQ.K)   GO TO  400
      DO 430   I=1,N
      WORK=A(I,IJ)
      A(I,IJ)=A(I,K)
  430 A(I,K)=WORK
  400 CONTINUE
      RETURN
  910 INDER=-1
      WRITE(6,691)  N
  691 FORMAT(1H0,8H *** N = ,I5,5X,30HN SHOULD BE POSITIVE IN TINVCC)
      RETURN
  900 INDER=-1
      WRITE(6,690)    N,NN
  690 FORMAT(1H0,8H *** N =  ,I5,5X,4HNN =,I5/
     1 55H    N SHOULD BE LESS THAN OR EQUAL TO NN IN TINVCC       )
      RETURN
  920 DT=DCMPLX(0.D0,0.D0)
      INDER=N-K+1
      NNN=K-1
      WRITE(6,692)  NNN
  692 FORMAT(1H0,48H*** GIVEN MATRIX A TO TINVCC IS ILL CONDITIONED
     1,24HOR SINGULAR WITH RANK = ,I4,27H.   RETURN WITH NO FURTHER
     2,11HCALCULATION       )
      RETURN
  930 DT=A(1,1)
      K=1
      IF(DT.EQ.DCMPLX(0.D0,0.D0))  GO TO  920
      A(1,1)=DCMPLX(1.D0,0.D0)/A(1,1)
      RETURN
      END
C*
C* ********************************************************************
C*  pptmtx4t.fi (mesh point)
C* --------------------------------------------------------------------
C     ---1---------2---------3---------4---------5---------6---------7--
C* THE GAUSS POINTS AND WEIGHTS
C ********************************************
      SUBROUTINE PPTMTV4(P,GP,PBAR,NPX,pcn,npw)
C ---------- for 'yn4p8x*.f' -----------------
C ********************************************
C
      IMPLICIT REAL*8(A-H,O-Z)
      PARAMETER (NP1=16,NP2=14,NP3=5,NP=NP1+NP2+NP3)
      DIMENSION P(100),GP(100)
      dimension pcn(0:6),npw(0:3)
      DATA P4/12.D0/,P6/40.D0/,P0/1.D-3/
      NPRINT=12
C
      NPX=NP
      PBAR=P6
      PMAX=2.0D0
      P2=PMAX
      P1= 0.2 D0 *P2
      P3=(P4-P2)* 0.2D0 +P2
      P5=(P6-P4)* 0.4D0 +P4
C*
        pcn(0)=p0
        pcn(1)=p1
        pcn(2)=p2
        pcn(3)=p3
        pcn(4)=p4
        pcn(5)=p5
        pcn(6)=p6
C*
         npw(1)=np1
         npw(2)=np2
         npw(3)=np3
         npw(0)=np
C*
      P0H=0.5*P0
      CALL GAUSS(0.D0,P0,P0H,1,P,GP)
      CALL GAUSS(P0,P2,P1,NP1-1,P(2),GP(2))
      CALL GAUSS(P2,P4,P3,NP2,P(NP1+1),GP(NP1+1))
      CALL GAUSS(P4,P6,P5,NP3,P(NP1+NP2+1),GP(NP1+NP2+1))
C*
      END
C ********************************************
C     ---1---------2---------3---------4---------5---------6---------7--
      SUBROUTINE GAUSS (P1,P3,P2,NN,P,W)
C ********************************************
C
C     THIS SUBROUTINE COMPUTES THE GAUSS POINTS AND WEIGHTS FOR AN
C     ARBITRARY INTERVAL (P1,P3) WITH THE SAME NUMBER OF POINTS
C     RIGHT AND LEFT FROM P2 (WHICH IS IN THIS SENSE THE STRONG POINT
C     OF THE INTERVAL). P3=9999 IS THE CODE FOR INFINITY.
C
      IMPLICIT REAL*8(A-H,O-Z)
      PARAMETER (NMAX=100)
      DIMENSION P(NMAX),W(NMAX),X(NMAX),G(NMAX)
      IF(NN.LE.0) GOTO 1
      IFF=0
      PI=3.141592653589793238D0
C*      WRITE (6,*)'GAUSS: IFAIL=',IFF
CC***      CALL D0ANAL(NN,G,X)
      call gauleg(X,G,NN)
      IF (P3.NE.9999.D0) THEN
       DO 4 J=1,NN
        P(J)=(P2*(P1-P3)+(2*P1*P3-P2*(P1+P3))*X(J))
     X          /(P1-P3+(P1+P3-2*P2)*X(J))
        W(J)=G(J)*2.D0 *(P1-P3)*(P1*P3+P2*(P2-P1-P3))/
     X          (P1-P3+(P1+P3-2.D0 *P2)*X(J))**2.D0
  4      CONTINUE
      ELSE
       P1=DATAN(P1)
       P2=DATAN(P2)
       P3=PI/2.D0
       DO 5 J=1,NN
        P(J)=TAN((P2*(P1-P3)+(2.D0*P1*P3-P2*(P1+P3))*X(J))
     X       /(P1-P3+(P1+P3-2.D0*P2)*X(J)))
        W(J)=G(J)*2.D0*(P1-P3)*(P1*P3+P2*(P2-P1-P3))/
     X       (P1-P3+(P1+P3-2.D0*P2)*X(J))**2.D0/
     X        DCOS(DATAN(P(J)))**2.D0
  5      CONTINUE
      ENDIF
C*     WRITE (6,10) (X(I),G(I),P(I),W(I),I=1,NN)
C*    FORMAT (4E20.10)
  1     RETURN
        END
c
c
c
C     ---1---------2---------3---------4---------5---------6---------7--
      SUBROUTINE GAULEG(X,W,N)
      IMPLICIT REAL*8(A-H,O-Z)
      DIMENSION X(N),W(N)
      logical first
      save first,eps
      data first/.true./
      pi=dacos(-1.d0)
      if (first) then
       first=.false.
       Z=1.d-6
   20  Z=Z*.1d0
       IF (DABS(1.d0+Z).EQ.1.d0) GOTO 30
       GOTO 20
c   30  EPS=Z
   30  EPS=Z*10.d0
       WRITE(*,*) 'gauleg EPS= ',EPS
      endif
      M=(N+1)/2
      DO 12 I=1,M
        Z=dCOS(pi*(I-.25d0)/(N+.5d0))
    1   CONTINUE
          P1=1.d0
          P2=0.d0
          DO 11 J=1,N
            P3=P2
            P2=P1
            P1=((2.d0*J-1.d0)*Z*P2-(J-1.d0)*P3)/J
  11      CONTINUE
          PP=N*(Z*P1-P2)/(Z*Z-1.d0)
          Z1=Z
          Z=Z1-P1/PP
C         WRITE(*,*) Z-Z1
        IF (dABS(Z-Z1).GT.EPS) GOTO 1
        X(I)=-Z
        X(N+1-I)=Z
        W(I)=2.d0/((1.d0-Z*Z)*PP*PP)
        W(N+1-I)=W(I)
   12 CONTINUE
      END
C End of file
