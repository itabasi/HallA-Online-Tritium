double corr_R_adc(int i);
double corr_R_x(int i);
double corr_R_th(int i);
double corr_R_alig(int i);
double corr_L_adc(int i);
double corr_L_x(int i);
double corr_L_th(int i);
double corr_L_alig(int i);
double s2f1_off(int i,char* ARM,char* MODE,int KINE);
double s2fadc_off(int i,char* ARM, char* MODE, int KINE);
const double c=299792458e-9;// [m/ns]
const double mk=493.7e-3;// Kaon mass [GeV/c^2]
const double me=0.511e-3;// electron mass [GeV/c^2] 
const double ml=1115.7e-3;//Lambda mass [GeV/c^2]
const double mn=939.6e-3; // neutron mass [GeV/c^2]
const double mpi=139.6e-3;// pion mass [GeV/c^2]
const  int nth=3; //th num
#include <iostream>
#include <fstream>
#include <math.h>
#include <string>
#include <time.h>
#include <stdio.h>
#include <unistd.h>
#include <sstream>
using namespace std;
#include "TApplication.h"
#include "TH1F.h"
#include "TH2F.h"
#include "TF1.h"
#include "TFile.h"
#include "TLeaf.h"
#include "TTree.h"
#include "TCut.h"
#include "TChain.h"
#include "TCanvas.h"
#include "TVector3.h"
#include "TGraph.h"
#include "TLine.h"
#include "TLatex.h"
#include "TText.h"
#include "TStyle.h"
#include "TROOT.h"
#include "TGraphErrors.h"
#include "TProfile.h"
#include "TSystem.h"
#include "TColor.h"
#include "TPaveText.h"
#include "TRandom.h"
#include "Setting.h"

//===================================================================//
//============================= Main ================================//
//===================================================================//
int main(int argc, char** argv){

  int ch; char* mode;
  int kine=1;// 1: hydrogen kinematics 2:tritium kinematics
  double tdc_time=58.0e-3;//[ns]
  string ifname ="/home/itabashi/jlab_nnL/ita_scripts/rootfiles/Lambda_small1_mm_ana1230.root";
  string ofname = "/pdf/hydro1_AC_eff_test.pdf";
  bool output_flag = false;
  bool root_flag = false;
  bool draw_flag = true;
  bool coin_flag = false;
  bool test_flag=false;
  bool Pion_flag=false;
  string pngname;
  extern char *optarg;
  while((ch=getopt(argc,argv,"h:f:w:n:r:bcop:GHTt12P"))!=-1){
    switch(ch){
    case 'f':
      ifname = optarg;
      cout<<"input filename : "<<ifname<<endl;
      break;
    case 'w':
      output_flag = true;
      draw_flag = false;
      ofname = optarg;
      cout<<"output filename : "<<ofname<<endl;
      break;
    case 'b':
      draw_flag = false;
      cout<<"BACH MODE!"<<endl;
      break;

    case 'r':
      root_flag = true;
      draw_flag = false;
      ofname = optarg;
      cout<<"output root filename : "<<ofname<<endl;      
      break;

    case 'G':
    mode="G";
      break;
  
    case 'H':
    mode="H";
      break;

    case 'T':
      mode="T";    
	break;

    case 't':
      test_flag=true;    
	break;


    case 'P':
      Pion_flag=true;    
	break;

  case '1':
    tdc_time=56.23e-3;//[ns]
    kine=1;
      break;

  case '2':
    tdc_time=58e-3;//[ns]
    kine=2;
      break;


    case 'h':
      cout<<"-f : input root filename"<<endl;
      cout<<"-w : output pdf filename"<<endl;
      return 0;
      break;
    case '?':
      cout<<"unknown option...."<<endl;
      return 0;
      break;
    default:
      cout<<"type -h to see help!!"<<endl;
      return 0;
    }
  }


  TApplication *theApp =new TApplication("App",&argc,argv);
  // if(draw_flag==0)
   gROOT->SetBatch(1);


 Setting *set = new Setting();
 set->Initialize();


 //TChain //
  TChain* T;
  if(mode=="G"|| mode=="T"){T=new TChain("tree"); }
  else {T=new TChain("T");}


  ifstream ifp(Form("%s",ifname.c_str()),ios::in);
  if(!ifp){ cout<<"no input file "<<ifname<<endl; exit(1); }
  string buf, runname;
  while(1){
    getline(ifp,buf);
    if( buf[0]=='#' ){ continue; }
    if( ifp.eof() ) break;
    stringstream sbuf(buf);
    sbuf >> runname;
    T->Add(runname.c_str());
    //    cout<<buf<<endl;
  }


  cout<<"mode :"<<mode<<endl;
  cout<<"tdc_time[ns]: "<<tdc_time<<endl;
  cout<<"Pion Flag:"<<Pion_flag<<endl;
  int evnt=T->GetEntries();
  if(test_flag){evnt=1000;}
  cout<<"Get Entries: "<<evnt<<endl;

  double fbus_time=0.5;// [ns]

 //============= Set Branch Status ==================//

  int max=1000; 
  double RF1[max],LF1[max];
  double Rs0r_ac[max],Rs0l_ac[max],Ls0r_ac[max],Ls0l_ac[max];
  double Rs2r_ac[max],Rs2l_ac[max],Ls2r_ac[max],Ls2l_ac[max];
  double Rs0r_tc[max],Rs0l_tc[max],Ls0r_tc[max],Ls0l_tc[max];
  double Rs2r_tc[max],Rs2l_tc[max],Ls2r_tc[max],Ls2l_tc[max];
  double Ra1t[max],Ra1a[max],Ra1a_p[max],Ra1a_c[max],Ra1sum;
  double Ra2t[max],Ra2a[max],Ra2a_p[max],Ra2a_c[max],Ra2sum;
  double La1t[max],La1a[max],La1a_p[max],La1a_c[max],La1sum;
  double La2t[max],La2a[max],La2a_p[max],La2a_c[max],La2sum;
  double Rp[max],Rpx[max],Rpy[max],Lp[max],Lpx[max],Lpy[max];
  double Rth[max],Rph[max],Rx[max],Rvz[max],Lth[max],Lph[max],Lx[10],Ly[10],Lvz[100];
  double DRevtype;
  double Rbeta[max],Lbeta[max];
  double rs2pathl[max],rs0pathl[max],rtrpathl[max];
  double ls2pathl[max],ls0pathl[max],ltrpathl[max];
  double trigger[100];
  double hallap;
  double Rs2tpads[100],Ls2tpads[100];
  double Rs2trpad[100],Ls2trpad[100];
  double Ls2rt_c[100],Ls2lt_c[100];
  double Ls2lt[100], Ls2rt[100];
  double Ls2rtc_fadc[100],Ls2ltc_fadc[100];
  double Rs2lt[100], Rs2rt[100];
  double Rs2rtc_fadc[100],Rs2ltc_fadc[100];
  //---- Gogami root ---------//
  double ctime[1000];
  double DRT5;
  double Rs2ra[100];
  double Rs2la[100];
  double Ls2ra[100];
  double Ls2la[100];
  double Ls2la_c[100];
  double Ls2ra_c[100];
  T->SetBranchStatus("*",0);  
 //------ Right Arm -------------//

 T->SetBranchStatus("DR.evtype",1);
 T->SetBranchAddress("DR.evtype",&DRevtype); 
 T->SetBranchStatus("RTDC.F1FirstHit",1);
 T->SetBranchAddress("RTDC.F1FirstHit",RF1); 
 T->SetBranchStatus("R.s2.t_pads",1);
 T->SetBranchAddress("R.s2.t_pads",Rs2tpads);
 T->SetBranchStatus("R.s2.trpad",1);
 T->SetBranchAddress("R.s2.trpad",Rs2trpad);
 T->SetBranchStatus("R.s2.ra",1);
 T->SetBranchAddress("R.s2.ra",Rs2ra);
 T->SetBranchStatus("R.s2.la",1);
 T->SetBranchAddress("R.s2.la",Rs2la);
 T->SetBranchStatus("R.s2.lt_c",1);
 T->SetBranchAddress("R.s2.lt_c",Rs2l_tc);
 T->SetBranchStatus("R.s2.rt_c",1);
 T->SetBranchAddress("R.s2.rt_c",Rs2r_tc);
 //--- FBUS TDC --------//
 T->SetBranchStatus("R.s2.lt",1);
 T->SetBranchAddress("R.s2.lt",Rs2lt);
 T->SetBranchStatus("R.s2.rt",1);
 T->SetBranchAddress("R.s2.rt",Rs2rt);
 
 T->SetBranchStatus("R.s2.lt_c",1);
 T->SetBranchAddress("R.s2.lt_c",Rs2l_tc); 
 T->SetBranchStatus("R.s2.rt_c",1);
 T->SetBranchAddress("R.s2.rt_c",Rs2r_tc);
 
 //---FADC TDC --------//
 T->SetBranchStatus("R.s2.rtc_fadc",1);
 T->SetBranchAddress("R.s2.rtc_fadc",Rs2rtc_fadc);
 T->SetBranchStatus("R.s2.ltc_fadc",1);
 T->SetBranchAddress("R.s2.ltc_fadc",Rs2ltc_fadc);



 T->SetBranchStatus("R.a1.asum_c",1);
 T->SetBranchAddress("R.a1.asum_c",&Ra1sum);
 T->SetBranchStatus("R.a2.asum_c",1);
 T->SetBranchAddress("R.a2.asum_c",&Ra2sum);

  // path length//
 T->SetBranchStatus("R.s2.trpath",1); 
 T->SetBranchAddress("R.s2.trpath",rs2pathl); 
 T->SetBranchStatus("R.tr.pathl",1);  
 T->SetBranchAddress("R.tr.pathl",rtrpathl);
 // Target positon information //
 T->SetBranchStatus("R.tr.p",1);
 T->SetBranchAddress("R.tr.p",Rp);
 T->SetBranchStatus("R.tr.vz",1);    
 T->SetBranchAddress("R.tr.vz",Rvz); 

 //------ Left Arm ---------------//
 T->SetBranchStatus("LTDC.F1FirstHit",1);
 T->SetBranchAddress("LTDC.F1FirstHit",LF1); 
 T->SetBranchStatus("L.s2.t_pads",1);
 T->SetBranchAddress("L.s2.t_pads",Ls2tpads);
 T->SetBranchStatus("L.s2.trpad",1);
 T->SetBranchAddress("L.s2.trpad",Ls2trpad);
 T->SetBranchStatus("L.s2.ra",1);
 T->SetBranchAddress("L.s2.ra",Ls2ra);
 T->SetBranchStatus("L.s2.la",1);
 T->SetBranchAddress("L.s2.la",Ls2la);
 T->SetBranchStatus("L.s2.ra_c",1);
 T->SetBranchAddress("L.s2.ra_c",Ls2ra_c);
 T->SetBranchStatus("L.s2.la_c",1);
 T->SetBranchAddress("L.s2.la_c",Ls2la_c);

  // path length//
 T->SetBranchStatus("L.s2.trpath",1); 
 T->SetBranchAddress("L.s2.trpath",ls2pathl); 
 T->SetBranchStatus("L.tr.pathl",1);   
 T->SetBranchAddress("L.tr.pathl",ltrpathl);
 T->SetBranchStatus("L.tr.p",1);
 T->SetBranchAddress("L.tr.p",Lp);  
 T->SetBranchStatus("L.tr.vz",1);    
 T->SetBranchAddress("L.tr.vz",Lvz);
 T->SetBranchStatus("L.tr.x",1);    
 T->SetBranchAddress("L.tr.x",Lx);
 T->SetBranchStatus("L.tr.y",1);    
 T->SetBranchAddress("L.tr.y",Ly);
 T->SetBranchStatus("L.tr.ph",1);    
 T->SetBranchAddress("L.tr.ph",Lph);
 T->SetBranchStatus("L.tr.th",1);    
 T->SetBranchAddress("L.tr.th",Lth);
 //--- FBUS TDC --------//
 T->SetBranchStatus("L.s2.lt",1);
 T->SetBranchAddress("L.s2.lt",Ls2lt);
 T->SetBranchStatus("L.s2.rt",1);
 T->SetBranchAddress("L.s2.rt",Ls2rt);
 
 T->SetBranchStatus("L.s2.lt_c",1);
 T->SetBranchAddress("L.s2.lt_c",Ls2l_tc); 
 T->SetBranchStatus("L.s2.rt_c",1);
 T->SetBranchAddress("L.s2.rt_c",Ls2r_tc);
 
 //---FADC TDC --------//
 T->SetBranchStatus("L.s2.rtc_fadc",1);
 T->SetBranchAddress("L.s2.rtc_fadc",Ls2rtc_fadc);
 T->SetBranchStatus("L.s2.ltc_fadc",1);
 T->SetBranchAddress("L.s2.ltc_fadc",Ls2ltc_fadc);
 
 if(mode=="G"){
 T->SetBranchStatus("ctime",1);    
 T->SetBranchAddress("ctime",ctime);
 T->SetBranchStatus("DR.T5",1);    
 T->SetBranchAddress("DR.T5",&DRT5);

}



 //========== New Tree ==============================//
 TFile* fnew =new TFile("%s",ofname.c_str(),"recreate");
 TTree* tnew=new TTree("T","Coin time events shift hist");
 double f1_s2r;//in real this is left PMT
 double f1_s2l;
 double f1_Rs2r[16],f1_Rs2l[16],f1_Ls2r[16],f1_Ls2l[16];
 double fbus_Rs2r[16],fbus_Rs2l[16],fbus_Ls2r[16],fbus_Ls2l[16];
 double fadc_Rs2r[16],fadc_Rs2l[16],fadc_Ls2r[16],fadc_Ls2l[16];
 double coin_f1,coin_fadc,coin_fbus;
 double coin_f1_c,coin_fadc_c,coin_fbus_c;
 int event,trig;
 int Ls2pads,Rs2pads;
   tnew->Branch("nev",&event);
   tnew->Branch("trig",&trig);
   tnew->Branch("Rs2_pads",&Rs2pads);
   tnew->Branch("Ls2_pads",&Ls2pads);
   
 //-------- F1TDC -----------//
  tnew->Branch("Ls2_f1_rt", f1_Ls2r,"Ls2_f1_rt[16]/D");
  tnew->Branch("Ls2_f1_lt", f1_Ls2l,"Ls2_f1_lt[16]/D");
  tnew->Branch("Rs2_f1_rt", f1_Rs2r,"Rs2_f1_rt[16]/D");
  tnew->Branch("Rs2_f1_lt", f1_Rs2l,"Rs2_f1_lt[16]/D");
  tnew->Branch("coin_f1", &coin_f1,"coin_f1/D");
  tnew->Branch("coin_f1_c", &coin_f1_c,"coin_f1_c/D");  
  //------ FBUS -------------//
  tnew->Branch("Ls2_fbus_rt", fbus_Ls2r,"Ls2_fbus_rt[16]/D");
  tnew->Branch("Ls2_fbus_lt", fbus_Ls2l,"Ls2_fbus_lt[16]/D");
  tnew->Branch("Rs2_fbus_rt", fbus_Rs2r,"Rs2_fbus_rt[16]/D");
  tnew->Branch("Rs2_fbus_lt", fbus_Rs2l,"Rs2_fbus_lt[16]/D");
  tnew->Branch("coin_fbus", &coin_fbus,"coin_fbus/D");
  tnew->Branch("coin_fbus_c", &coin_fbus_c,"coin_fbus_c/D");   
  //------- FADC -------------//
  tnew->Branch("Ls2_fadc_rt", fadc_Ls2r,"Ls2_fadc_rt[16]/D");
  tnew->Branch("Ls2_fadc_lt", fadc_Ls2l,"Ls2_fadc_lt[16]/D");
  tnew->Branch("Rs2_fadc_rt", fadc_Rs2r,"Rs2_fadc_rt[16]/D");
  tnew->Branch("Rs2_fadc_lt", fadc_Rs2l,"Rs2_fadc_lt[16]/D");
  tnew->Branch("coin_fadc", &coin_fadc,"coin_fadc/D");
  tnew->Branch("coin_fadc_c", &coin_fadc_c,"coin_fadc_c/D");   
 //==================================================//  
 // Time scale [ns] //
 // Energy scale [GeV] //

 double ac1_adc[nth],ac2_adc[nth];
 double min_coin,max_coin,min_coin_c,max_coin_c;
 double min_ac1,max_ac1,min_ac2,max_ac2,min_adc,max_adc;
 double th1_max,th2_max;
 double ac1_kcut,ac2_kcut_min,ac2_kcut_max;

 double mtr;
 mtr=938.27e-3;// proton mass [GeV/c^2]
 // double mh;
 double m2; 
 double Ee,Ee_,Ek,Epi;
 double pe,pe_,pk,ppi;
 double coin_t,coin_tc;
 double rtof[16];
 double rbeta,rbeta_k,lbeta;
 double Rs2_off,Ls2_off; 
 double Rs2_tcorr,Ls2_tcorr;
 bool cut_ac1,cut_ac2,cut_beta;
 int nac1,nac2,nac3,n;
 double tofs_r,tof_l; 
 double rpathl,lpathl;
 double corr_R,corr_L;
 double rpath_corr,lpath_corr;


 //--- Coin Offset -----//
 double pathl_off,s2_offset,coin_offset;
 pathl_off=0.0;

 pathl_off=0.0;
 if(mode=="H"&&kine==2){
 coin_offset=498.;
 s2_offset=-489.0;
 pathl_off=-485.5; 

 }else if(mode=="H" && kine==1){
 pathl_off=-498.+30.-3.0+0.5;
 s2_offset=-500.0+25.;
 coin_offset=-41.35+498.;
 if(Pion_flag==1){coin_offset=coin_offset;cout<<"Pion flag"<<Pion_flag<<endl;}else{coin_offset=coin_offset;cout<<"Pion flag"<<Pion_flag<<endl;}

}


double  Rs2_fadc_off;
 // double mm;
 //----- Cut Parameters ----------//
 double coin_cutmin=-248;
 double coin_cutmax=-244; 
 double rpathl_cutmin=28.7;
 double rpathl_cutmax=29.4;
 double lpathl_cutmin=28.6;
 double lpathl_cutmax=29.2;
 double rbeta_cutmin=0.0;
 double rbeta_cutmax=1.0;
 double lbeta_cutmin=0.9;
 double lbeta_cutmax=1.0;
 double Rvz_cutmin=-0.1;
 double Rvz_cutmax= 0.1;
 double Lvz_cutmin=-0.1;
 double Lvz_cutmax= 0.1;
 double Rx_cutmin= -0.4;
 double Rx_cutmax= 0.4;
 //-------------------------------//
 bool cut_Rs2,cut_Ls2,cut_rpathl,cut_lpathl,cut_coin,cut_rbeta,cut_lbeta,cut_vz,cut_Rx,cut_trig,coin_trig,right_trig,cut_track,cut_s0,tri_T5;
 double Rtof;
 double Ltof;
 double Rtof_cut;
 double tof_r;
 int ev=0;
 int e=0;
 int ev_k=0;




 
 cout<<"start Fill "<<endl;
 
 for(int k=0;k<evnt;k++){

   
   if(k==ev*100000){
     cout<<"Fill Event: "<<k<<"/"<<evnt<<endl; 
     ev=ev+1;}

   for(int l=0;l<16;l++){

     //---- F1TDC ----//
     f1_Rs2r[l]=-2222.2;
     f1_Rs2l[l]=-2222.2;
     f1_Ls2r[l]=-2222.2;
     f1_Ls2l[l]=-2222.2;
     
     //--FBUS ---//
     fbus_Rs2r[l]=-2222.2;
     fbus_Rs2l[l]=-2222.2;
     fbus_Ls2r[l]=-2222.2;
     fbus_Ls2l[l]=-2222.2;
     //---- FADC -----//
     fadc_Rs2r[l]=-2222.2;
     fadc_Rs2l[l]=-2222.2;
     fadc_Ls2r[l]=-2222.2;
     fadc_Ls2l[l]=-2222.2;


   }

   coin_f1=-2222.0;
   coin_fbus=-2222.0;
   coin_fadc=-2222.0;
   coin_f1_c=-2222.0;
   coin_fbus_c=-2222.0;
   coin_fadc_c=-2222.0;   

   


   //======= Get Entry ====//
   
   T->GetEntry(k); 
   event=k;
   trig=(int)DRevtype;



   
 pe_=Lp[0];//*sqrt(1+pow(Lth[0],2)+pow(Lph[0],2));
 pk=Rp[0];//*sqrt(1+pow(Rth[0],2)+pow(Rph[0],2));
 ppi=Rp[0];//*sqrt(1+pow(Rth[0],2)+pow(Rph[0],2));
 pe=4.313; // GeV   //hallap*1.0e-3;
 Ee=sqrt(pow(pe,2)+pow(me,2));
 Ee_=sqrt(pow(pe_,2)+pow(me,2));
 Epi=sqrt(pow(ppi,2)+pow(mpi,2));
 Ek=sqrt(pow(pk,2)+pow(mk,2));
 Ls2pads=(int)Ls2tpads[0];
 Rs2pads=(int)Rs2tpads[0];

 

 
 rpathl=rtrpathl[0]+rs2pathl[0]; // R-HRS path length S2 -RF
 lpathl=ltrpathl[0]+ls2pathl[0]; // L-HRS path length S2 -RF

 if(Pion_flag==1){rbeta=ppi/Epi;
   if(k==1){cout<<"Pion mass beta"<<endl;}} //Pion
 else{rbeta=pk/Ek; 
   if(k==1){cout<<"Kaon mass beta"<<endl;}}//Kaon}
 rpath_corr=rpathl/rbeta/c;
 lbeta=1.0;//pe_/Ee_; 
 lpath_corr=lpathl/lbeta/c;
 Rs2_off=s2f1_off(Rs2pads,"R",mode,kine);
 Ls2_off=s2f1_off(Ls2pads,"L",mode,kine);
 Rs2_fadc_off=s2fadc_off(Rs2pads,"R",mode,kine); //fadc coin offset        
 tof_r=(((-RF1[48+Rs2pads]+RF1[46]-RF1[16+Rs2pads]+RF1[9]+Rs2_off)/2.0))*tdc_time;
 tof_l=((-LF1[Ls2pads]+LF1[30]-LF1[Ls2pads+48]+LF1[37]+Ls2_off)/2.0)*tdc_time;
 Ltof=tof_l-(-LF1[27]+LF1[28])/2.0*tdc_time; 
 if(mode=="G"){
   coin_t=ctime[0];
   coin_tc=ctime[0];
 }else{

  coin_t=tof_r-tof_l-coin_offset-s2_offset; //coin time
  coin_tc=tof_r-tof_l+rpath_corr-lpath_corr-pathl_off-coin_offset; //  coin Path & Offset  correction 

}
//====== Cut condition ========================// 
   cut_rpathl=false;
   cut_lpathl=false;
   cut_Rs2=false;
   cut_Ls2=false;
   cut_vz=false;
   cut_track=false;
   cut_s0=false;
   coin_trig=false;
   tri_T5=false;
   if(Rvz_cutmin<Rvz[0] && Rvz[0]<Rvz_cutmax && Lvz_cutmin<Lvz[0] && Lvz[0]<Lvz_cutmax)cut_vz=true;
  if(Rs2trpad[0]==Rs2pads && Ls2trpad[0]==Ls2pads)cut_track=true;
  if(rpathl_cutmin<rpathl && rpathl<rpathl_cutmax)cut_rpathl=true;
  if(lpathl_cutmin<lpathl && lpathl<lpathl_cutmax)cut_lpathl=true;
  if(RF1[43]>0 && RF1[44]>0 && LF1[27]>0 && LF1[28]>0)cut_s0=true;
  if(RF1[48+Rs2pads]>0 && RF1[16+Rs2pads]>0)cut_Rs2=true;
  if(LF1[Ls2pads]>0 && LF1[Ls2pads+48]>0)cut_Ls2=true;
  if(cut_Rs2 && cut_Ls2 && cut_s0)coin_trig=true; 
  if(DRevtype==5)tri_T5=true; 
 //=======================================//
  


   //==========================================//
   //========= Fill Hist =====================//
   //========================================//


       //========================//
       //======== R-HRS =========//
       //========================//


       //--------- F1TDC --------//
       f1_Rs2r[Rs2pads]=(-RF1[Rs2pads+48]+RF1[46])*tdc_time;
       f1_Rs2l[Rs2pads]=(-RF1[16+Rs2pads]+RF1[9])*tdc_time;

       
       //--------- FBUS --------//
       fbus_Rs2r[Rs2pads]=Rs2rt[Rs2pads]*fbus_time;
       fbus_Rs2l[Rs2pads]=Rs2lt[Rs2pads]*fbus_time;
   
       //--------- FADC --------//
       fadc_Rs2r[Rs2pads]=Rs2rtc_fadc[Rs2pads];
       fadc_Rs2l[Rs2pads]=Rs2ltc_fadc[Rs2pads];

       

       
       //========================//
       //======== L-HRS =========//
       //========================//
       
       //--------- F1TDC --------//
       f1_Ls2r[Ls2pads]=(-LF1[Ls2pads+48]+LF1[37])*tdc_time;
       f1_Ls2l[Ls2pads]=(-LF1[Ls2pads]+LF1[30])*tdc_time;
       
       //--------- FBUS --------//
       fbus_Ls2r[Ls2pads]=Ls2rt[Ls2pads]*fbus_time;
       fbus_Ls2l[Ls2pads]=Ls2lt[Ls2pads]*fbus_time;

       //--------- FADC --------//
       fadc_Ls2r[Ls2pads]=Ls2rtc_fadc[Ls2pads];
       fadc_Ls2l[Ls2pads]=Ls2ltc_fadc[Ls2pads];
       

       //------- Coin time ---------//

       coin_f1=(f1_Rs2r[Rs2pads]+f1_Rs2l[Rs2pads])/2.0
	 -(f1_Ls2r[Ls2pads]+f1_Ls2l[Ls2pads])/2.0;
       coin_f1_c=coin_tc; // offset & path correction
       
       coin_fbus=(fbus_Rs2r[Rs2pads]+fbus_Rs2l[Rs2pads])/2.0
	 -(fbus_Ls2r[Ls2pads]+fbus_Ls2l[Ls2pads])/2.0;
       coin_fbus_c=coin_fbus+rpath_corr-lpath_corr;

       
       coin_fadc=(fadc_Rs2r[Rs2pads]+fadc_Rs2l[Rs2pads])/2.0
		    -(fadc_Ls2r[Ls2pads]+fadc_Ls2l[Ls2pads])/2.0;
       coin_fadc_c=coin_fadc+rpath_corr-lpath_corr-Rs2_fadc_off;
       


 tnew->Fill();

 }
 
 cout<<"Filled Hist "<<endl;


 // make root //
 if(root_flag){
   TFile* fout =new TFile(ofname.c_str(),"recreate");
     tnew->Write();
     fout->Close();
 }

 

 gSystem->Exit(1);
 theApp->Run();
 return 0;



}//end Main


//==============================================//
//========== Defined Function ==================//
//=============================================//

double s2f1_off(int i,char* ARM,char* MODE, int KINE){


  double RS2_offset[16],LS2_offset[16];
  if(MODE=="H" && KINE==2){
 
 double  RS2_off_H2[16]={-16911.4,-16864.3,-16900,-16897,-16873.8,-16868.4,-16901.1,-16876.8,-16895.4,-16860.9,-16893.1,-16884.4,-16847.3,-16842.7,-16836.9,-16882.6};
 double  LS2_off_H2[16]={-25336.9,-25386.6,-25367.5,-25392.3,-25391.1,-25386.2,-25422,-25428.9,-25417.3,-25426.8,-25438.7,-25383.4,-25396,-25418.5,-25436.4,-26082.1};
 
  LS2_offset[i]=LS2_off_H2[i];
  RS2_offset[i]=RS2_off_H2[i];
  }


  if(MODE=="H" && KINE==1){
    
    //double  RS2_off_H1[16]={-16911.4,-16864.9,-16900,-16897.6,-16874.8,-16869.3,-16901.1,-16876.8,-16895.6,-16860.3,-16892.6,-16885,-16847.3,-16843.3,-16838.4,-16882.6};
    //double  LS2_off_H1[16]={-25336.9,-25385.7,-25367,-25392.2,-25391,-25386.3,-25422,-25428.9,-25415.2,-25425,-25438,-25381,-25394.4,-25417.5,-25432.8,-26082.1};

double  RS2_off_H1[16]={-16828.7,-16863,-16894,-16893.3,-16870.9,-16867.2,-16900.3,-16876.8,-16876.8,-16861.6,-16895,-16890.7,-16854.6,-16852.9,-16850.5,-16861.9};
double  LS2_off_H1[16]={-25335,-25385.6,-25367,-25392.1,-25391.7,-25386.4,-25422.1,-25428.9,-25414.9,-25424.7,-25436.9, -25381.2,-25390,-25413.4,-25428.7,-26640.8};
  LS2_offset[i]=LS2_off_H1[i];
  RS2_offset[i]=RS2_off_H1[i];
  }

 double s2f1_offset; 
 if(ARM=="R")s2f1_offset=RS2_offset[i];
 else  if(ARM=="L")s2f1_offset=LS2_offset[i];
 else {cout<<"false read out !!"<<endl;}

  return s2f1_offset;

}



double s2fadc_off(int i,char* ARM, char* MODE, int KINE){


  double  RS2_off_H1[16]={ 7.68424e+01, 7.40065e+01, 7.34362e+01, 7.26922e+01, 7.26278e+01, 7.30048e+01, 7.28058e+01, 7.24404e+01, 7.30088e+01, 7.43471e+01, 7.37456e+01, 7.32006e+01, 7.43796e+01, 7.38757e+01, 7.39171e+01, 7.26792e+01};
//double  LS2_off_H1[16]={-25335,-25385.6,-25367,-25392.1,-25391.7,-25386.4,-25422.1,-25428.9,-25414.9,-25424.7,-25436.9, -25381.2,-25390,-25413.4,-25428.7,-26640.8};
  LS2_offset[i]=LS2_off_H1[i];
  RS2_offset[i]=RS2_off_H1[i];
  }

 double s2fadc_offset; 
 if(ARM=="R")s2fadc_offset=RS2_offset[i];
 else  if(ARM=="L")s2fadc_offset=LS2_offset[i];
 else {cout<<"false read out !!"<<endl;}

  return s2fadc_offset;



}
